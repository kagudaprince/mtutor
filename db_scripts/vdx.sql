--liquibase formatted sql

--changeset oracle:0001 (splitStatements:true)
ALTER SESSION SET CURRENT_SCHEMA = VIT_VDX;

CREATE SEQUENCE "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ" MINVALUE 1 INCREMENT BY 1;
CREATE SEQUENCE "VIT_VDX"."ID_SEQUENCE" start with 100000 increment by 25;

    CREATE TABLE "VIT_VDX"."ACTION_PARAMETER"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "PARAMETER_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ACTION_PARAMETER_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "PARAMETER_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ACTION_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "ERROR_TYPE_ID" NUMBER(19) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ACTION_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "ERROR_TYPE_ID" NUMBER(19) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ACTION_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ACTION_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSITORY"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSITORY_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSITORY_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSTRY_TYP_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ERROR_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ERROR_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ERROR_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "ERROR_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."ERROR_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "ERROR_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EVENT_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EVENT_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EVENT_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "EVENT_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EVENT_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "EVENT_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EXPECTED_MESSAGE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "BARCODE" VARCHAR2(255 CHAR) NOT NULL,
        "EXPECTED_ARRIVAL_TIM" TIMESTAMP(9) NOT NULL,
        "EXPECTED_ARRIVAL_TIM_OFST" NUMERIC NOT NULL,
        "EXPECTED_ARRIVAL_TIM_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "MESSAGE_STATUS_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "RECEIVED_ON" NUMBER(10) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "BARCODE" VARCHAR2(255 CHAR) NOT NULL,
        "EXPECTED_ARRIVAL_TIM" TIMESTAMP(9) NOT NULL,
        "EXPECTED_ARRIVAL_TIM_OFST" NUMERIC NOT NULL,
        "EXPECTED_ARRIVAL_TIM_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "MESSAGE_STATUS_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "RECEIVED_ON" NUMBER(10) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FIELD_DATA_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FIELD_DATA_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "FIELD_DATA_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "FIELD_DATA_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FORMAT_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "FILE_EXTENSION" VARCHAR2(255 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FORMAT_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "FILE_EXTENSION" VARCHAR2(255 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FORMAT_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "FORMAT_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "FORMAT_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MEASUREMENT_UNIT"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MEASUREMENT_UNIT_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MEASUREMENT_UNIT_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MEASUREMENT_UNIT_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "BAR_CODE" VARCHAR2(255 CHAR) NOT NULL,
        "BATCH_NUMBER" VARCHAR2(255 CHAR),
        "DUPLICATE_HASH" VARCHAR2(255 CHAR),
        "DUPLICATE_PARENT_ID" NUMBER(19),
        "EXTERNAL_ID" VARCHAR2(255 CHAR),
        "GROUP_NAME" VARCHAR2(255 CHAR),
        "IS_DUPLICATE" NUMBER(1,0),
        "LAST_MODIFIED_ON" TIMESTAMP(9) NOT NULL,
        "LAST_MODIFIED_ON_OFST" NUMERIC NOT NULL,
        "LAST_MODIFIED_ON_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_STATUS_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "MSG_PAYLOAD_ID" NUMBER(19),
        "PARENT_BAR_CODE" VARCHAR2(255 CHAR),
        "PARTITION_KEY" VARCHAR2(255 CHAR),
        "PARTY_ID" NUMBER(19),
        "PARTY_MESSAGE_STREAM_ID" NUMBER(19),
        "PROCESSED" NUMBER(1,0),
        "RECEIVED_ON" TIMESTAMP(9) NOT NULL,
        "RECEIVED_ON_OFST" NUMERIC NOT NULL,
        "RECEIVED_ON_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "RECORD_TYPE" VARCHAR2(80 CHAR),
        "RETRY_COUNT" NUMBER(10) NOT NULL,
        "SEQUENCE_NUMBER" NUMBER(10),
        "TOTAL_MESSAGES" NUMBER(10),
        "TOTAL_SUBMITTED_MSGS" NUMBER(10),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "BAR_CODE" VARCHAR2(255 CHAR) NOT NULL,
        "BATCH_NUMBER" VARCHAR2(255 CHAR),
        "DUPLICATE_HASH" VARCHAR2(255 CHAR),
        "DUPLICATE_PARENT_ID" NUMBER(19),
        "EXTERNAL_ID" VARCHAR2(255 CHAR),
        "GROUP_NAME" VARCHAR2(255 CHAR),
        "IS_DUPLICATE" NUMBER(1,0),
        "LAST_MODIFIED_ON" TIMESTAMP(9) NOT NULL,
        "LAST_MODIFIED_ON_OFST" NUMERIC NOT NULL,
        "LAST_MODIFIED_ON_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_STATUS_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "MSG_PAYLOAD_ID" NUMBER(19),
        "PARENT_BAR_CODE" VARCHAR2(255 CHAR),
        "PARTITION_KEY" VARCHAR2(255 CHAR),
        "PARTY_ID" NUMBER(19),
        "PARTY_MESSAGE_STREAM_ID" NUMBER(19),
        "PROCESSED" NUMBER(1,0),
        "RECEIVED_ON" TIMESTAMP(9) NOT NULL,
        "RECEIVED_ON_OFST" NUMERIC NOT NULL,
        "RECEIVED_ON_ZONE" VARCHAR2(60 CHAR) NOT NULL,
        "RECORD_TYPE" VARCHAR2(80 CHAR),
        "RETRY_COUNT" NUMBER(10) NOT NULL,
        "SEQUENCE_NUMBER" NUMBER(10),
        "TOTAL_MESSAGES" NUMBER(10),
        "TOTAL_SUBMITTED_MSGS" NUMBER(10),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_FORMAT"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "FORMAT_TYPE_ID" NUMBER(19),
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_FORMAT_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "FORMAT_TYPE_ID" NUMBER(19),
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_PARAM"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "MESSAGE_ID" NUMBER(19),
        "MESSAGE_TYPE_PARAM_ID" NUMBER(19),
        "PARAM_VALUE" VARCHAR2(300 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_PARAM_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "MESSAGE_ID" NUMBER(19),
        "MESSAGE_TYPE_PARAM_ID" NUMBER(19),
        "PARAM_VALUE" VARCHAR2(300 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_RESPONSE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "MESSAGE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "RECEIVED_ON" TIMESTAMP(9),
        "RECEIVED_ON_OFST" NUMERIC,
        "RECEIVED_ON_ZONE" VARCHAR2(60 CHAR),
        "RESPONSE_CODE" NUMBER(10),
        "RESPONSE_MESSAGE" VARCHAR2(255 CHAR),
        "RESPONSE_REF" VARCHAR2(255 CHAR),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "MESSAGE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "RECEIVED_ON" TIMESTAMP(9),
        "RECEIVED_ON_OFST" NUMERIC,
        "RECEIVED_ON_ZONE" VARCHAR2(60 CHAR),
        "RESPONSE_CODE" NUMBER(10),
        "RESPONSE_MESSAGE" VARCHAR2(255 CHAR),
        "RESPONSE_REF" VARCHAR2(255 CHAR),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_SCHEMA"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ID_PATH" VARCHAR2(255 CHAR),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTITION_KEY_PATH" VARCHAR2(255 CHAR),
        "SCHEMA_CONTENT" VARCHAR2(255 CHAR) NOT NULL,
        "SCHEMA_FORMAT" VARCHAR2(255 CHAR) NOT NULL,
        "VERSION" VARCHAR2(255 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ID_PATH" VARCHAR2(255 CHAR),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTITION_KEY_PATH" VARCHAR2(255 CHAR),
        "SCHEMA_CONTENT" VARCHAR2(255 CHAR) NOT NULL,
        "SCHEMA_FORMAT" VARCHAR2(255 CHAR) NOT NULL,
        "VERSION" VARCHAR2(255 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_STATUS"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_STATUS_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_STATUS_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MESSAGE_STATUS_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MESSAGE_STATUS_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE_PARAM"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EXTRACT_EXPRESSION" VARCHAR2(255 CHAR) NOT NULL,
        "MESSAGE_TYPE_ID" NUMBER(19),
        "NAME" VARCHAR2(255 CHAR) NOT NULL,
        "SOURCE" VARCHAR2(20 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EXTRACT_EXPRESSION" VARCHAR2(255 CHAR) NOT NULL,
        "MESSAGE_TYPE_ID" NUMBER(19),
        "NAME" VARCHAR2(255 CHAR) NOT NULL,
        "SOURCE" VARCHAR2(20 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MESSAGE_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "MESSAGE_TYPE_ID" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MSG_PAYLOAD"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PAYLOAD" VARCHAR2(500 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."MSG_PAYLOAD_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PAYLOAD" VARCHAR2(500 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "DEFAULT_VALUE" VARCHAR2(255 CHAR) NOT NULL,
        "IS_DYNAMIC" NUMBER(1,0) NOT NULL,
        "IS_NULLABLE" NUMBER(1,0) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_TYPE_ID" NUMBER(19) NOT NULL,
        "STATIC_VALUE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "DEFAULT_VALUE" VARCHAR2(255 CHAR) NOT NULL,
        "IS_DYNAMIC" NUMBER(1,0) NOT NULL,
        "IS_NULLABLE" NUMBER(1,0) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_TYPE_ID" NUMBER(19) NOT NULL,
        "STATIC_VALUE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_MAP"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ORDER" NUMBER(10) NOT NULL,
        "PARAMETER_ID" NUMBER(19),
        "RULE_ACTION_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_MAP_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ORDER" NUMBER(10) NOT NULL,
        "PARAMETER_ID" NUMBER(19),
        "RULE_ACTION_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARAMETER_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAM_VALUE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_ID" NUMBER(19),
        "FORMAT_TYPE_PARAM_ID" NUMBER(19),
        "MESSAGE_FORMAT_ID" NUMBER(19),
        "PARAM_VALUE" VARCHAR2(4000 CHAR) NOT NULL,
        "REPOSITORY_TYPE" VARCHAR2(50 CHAR),
        "REPOSITORY_TYPE_PARM_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARAM_VALUE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_ID" NUMBER(19),
        "FORMAT_TYPE_PARAM_ID" NUMBER(19),
        "MESSAGE_FORMAT_ID" NUMBER(19),
        "PARAM_VALUE" VARCHAR2(4000 CHAR) NOT NULL,
        "REPOSITORY_TYPE" VARCHAR2(50 CHAR),
        "REPOSITORY_TYPE_PARM_ID" NUMBER(19),
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "NAME" VARCHAR2(150 CHAR) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "NAME" VARCHAR2(150 CHAR) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBT_TYP_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARTY_ATTRIBUTE_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARTY_ATTRIBUTE_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBUTE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ATTRIBUTE_VALUE" VARCHAR2(250 CHAR) NOT NULL,
        "PARTY_ATTRIBUTE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ATTRIBUTE_VALUE" VARCHAR2(250 CHAR) NOT NULL,
        "PARTY_ATTRIBUTE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CRON_SCHEDULE" VARCHAR2(100 CHAR) NOT NULL,
        "INBOUND_MESSAGE_FRMT_ID" NUMBER(19),
        "JOB_ID" VARCHAR2(255 CHAR) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "OUTBOUND_MESSAG_FRMT_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "SINK_ID" NUMBER(19),
        "SOURCE_HOST" VARCHAR2(150 CHAR),
        "SOURCE_ID" NUMBER(19),
        "STREAM_IDENTIFIER" VARCHAR2(150 CHAR),
        "STREAM_TYPE_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CRON_SCHEDULE" VARCHAR2(100 CHAR) NOT NULL,
        "INBOUND_MESSAGE_FRMT_ID" NUMBER(19),
        "JOB_ID" VARCHAR2(255 CHAR) NOT NULL,
        "MESSAGE_SCHEMA_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "OUTBOUND_MESSAG_FRMT_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "SINK_ID" NUMBER(19),
        "SOURCE_HOST" VARCHAR2(150 CHAR),
        "SOURCE_ID" NUMBER(19),
        "STREAM_IDENTIFIER" VARCHAR2(150 CHAR),
        "STREAM_TYPE_ID" NUMBER(19),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PARTY_ID" NUMBER(19) NOT NULL,
        "PARTY_ROLE_TYPE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PARTY_ID" NUMBER(19) NOT NULL,
        "PARTY_ROLE_TYPE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARTY_ROLE_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "PARTY_ROLE_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_RULE_MAP"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PARTY_ID" NUMBER(19),
        "PARTY_RULE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_RULE_MAP_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "PARTY_ID" NUMBER(19),
        "PARTY_RULE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_SLA"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."PARTY_SLA_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."RULE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EVENT_TYPE_ID" NUMBER(19) NOT NULL,
        "MESSAGE_TYPE_ID" NUMBER(19),
        "ORDER" NUMBER(10) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."RULE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EVENT_TYPE_ID" NUMBER(19) NOT NULL,
        "MESSAGE_TYPE_ID" NUMBER(19),
        "ORDER" NUMBER(10) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."RULE_ACTION"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "EFFECTIVE_FROM" DATE NOT NULL,
        "EFFECTIVE_TO" DATE NOT NULL,
        "ORDER" NUMBER(10) NOT NULL,
        "RULE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."RULE_ACTION_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "ACTION_TYPE_ID" NUMBER(19) NOT NULL,
        "EFFECTIVE_FROM" DATE NOT NULL,
        "EFFECTIVE_TO" DATE NOT NULL,
        "ORDER" NUMBER(10) NOT NULL,
        "RULE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EVENT_TYPE_ID" NUMBER(19),
        "MEASUREMENT_UNIT_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "SLA_LEVEL_ID" NUMBER(19),
        "SLA_TYPE_ID" NUMBER(19),
        "SLA_VALUE" DOUBLE PRECISION NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "EVENT_TYPE_ID" NUMBER(19),
        "MEASUREMENT_UNIT_ID" NUMBER(19),
        "MESSAGE_TYPE_ID" NUMBER(19),
        "PARTY_ID" NUMBER(19),
        "SLA_LEVEL_ID" NUMBER(19),
        "SLA_TYPE_ID" NUMBER(19),
        "SLA_VALUE" DOUBLE PRECISION NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_LEVEL"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_LEVEL_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_LEVEL_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SLA_LEVEL_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_LEVEL_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SLA_LEVEL_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SLA_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SLA_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SLA_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."STREAM_TYPE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."STREAM_TYPE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR) NOT NULL,
        "KEY" NUMBER(19) NOT NULL,
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."STREAM_TYPE_TR"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "STREAM_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."STREAM_TYPE_TR_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "CODE" VARCHAR2(20 CHAR),
        "NAME" VARCHAR2(100 CHAR),
        "NOTE" VARCHAR2(255 CHAR),
        "STREAM_TYPE_ID" NUMBER(19) NOT NULL,
        "SYSTEM_LANGUAGE_ID" NUMBER(19) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SYSTEM_LANGUAGE"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "LANGUAGE_TAG" VARCHAR2(250 CHAR),
        "NAME" VARCHAR2(250 CHAR),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "LANGUAGE_TAG" VARCHAR2(250 CHAR),
        "NAME" VARCHAR2(250 CHAR),
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."TYPE_PARAM"(
        "ID" NUMBER(19) NOT NULL,
        "OPT_LOCK" NUMBER(10) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19),
        "DEFAULT_VALUE" VARCHAR2(255 CHAR),
        "DESCRIPTION" VARCHAR2(255 CHAR),
        "FIELD_DATA_TYPE_ID" NUMBER(19),
        "FORMAT_TYPE_ID" NUMBER(19),
        "MANDATORY" NUMBER(1,0) NOT NULL,
        "PARAM_NAME" VARCHAR2(255 CHAR) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR)
    ) ;

    CREATE TABLE "VIT_VDX"."TYPE_PARAM_AUDIT"(
        "ID" NUMBER(19) NOT NULL,
        "UUID" VARCHAR2(100 CHAR) NOT NULL,
        "TENANT" NUMBER(10) NOT NULL,
        "DATA_REPOSITORY_TYPE_ID" NUMBER(19),
        "DEFAULT_VALUE" VARCHAR2(255 CHAR),
        "DESCRIPTION" VARCHAR2(255 CHAR),
        "FIELD_DATA_TYPE_ID" NUMBER(19),
        "FORMAT_TYPE_ID" NUMBER(19),
        "MANDATORY" NUMBER(1,0) NOT NULL,
        "PARAM_NAME" VARCHAR2(255 CHAR) NOT NULL,
        "DISCRIMINATOR" VARCHAR2(31 CHAR) NOT NULL,
        "DATE_TIME_LAST_MODIFIED" DATE,
        "OS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SESS_USER_LAST_MODIFIED" VARCHAR2(60 CHAR),
        "SEQ_NO" NUMBER(15) NOT NULL,
        "ACTION" VARCHAR2(1 CHAR) NOT NULL,
        "AUDIT_DATE" DATE NOT NULL,
        "DELETE_OS_USER" VARCHAR2(60 CHAR),
        "DELETE_SESS_USER" VARCHAR2(60 CHAR)
    ) ;


CREATE INDEX "VIT_VDX"."ACTION_PARAMETER_PK" ON "VIT_VDX"."ACTION_PARAMETER"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."ACTION_PARAMETER" ADD CONSTRAINT "ACTION_PARAMETER_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."ACTION_PARAMETER_PK";

CREATE INDEX "VIT_VDX"."ACTION_TYPE_PK" ON "VIT_VDX"."ACTION_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."ACTION_TYPE" ADD CONSTRAINT "ACTION_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."ACTION_TYPE_PK";

CREATE INDEX "VIT_VDX"."ACTION_TYPE_TR_PK" ON "VIT_VDX"."ACTION_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."ACTION_TYPE_TR" ADD CONSTRAINT "ACTION_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."ACTION_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_PK" ON "VIT_VDX"."DATA_REPOSITORY"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."DATA_REPOSITORY" ADD CONSTRAINT "DATA_REPOSITORY_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."DATA_REPOSITORY_PK";

CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_PK" ON "VIT_VDX"."DATA_REPOSITORY_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."DATA_REPOSITORY_TYPE" ADD CONSTRAINT "DATA_REPOSITORY_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_PK";

CREATE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_PK" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."DATA_REPOSTRY_TYP_TR" ADD CONSTRAINT "DATA_REPOSTRY_TYP_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_PK";

CREATE INDEX "VIT_VDX"."ERROR_TYPE_PK" ON "VIT_VDX"."ERROR_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."ERROR_TYPE" ADD CONSTRAINT "ERROR_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."ERROR_TYPE_PK";

CREATE INDEX "VIT_VDX"."ERROR_TYPE_TR_PK" ON "VIT_VDX"."ERROR_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."ERROR_TYPE_TR" ADD CONSTRAINT "ERROR_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."ERROR_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."EVENT_TYPE_PK" ON "VIT_VDX"."EVENT_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."EVENT_TYPE" ADD CONSTRAINT "EVENT_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."EVENT_TYPE_PK";

CREATE INDEX "VIT_VDX"."EVENT_TYPE_TR_PK" ON "VIT_VDX"."EVENT_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."EVENT_TYPE_TR" ADD CONSTRAINT "EVENT_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."EVENT_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."EXPECTED_MESSAGE_PK" ON "VIT_VDX"."EXPECTED_MESSAGE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."EXPECTED_MESSAGE" ADD CONSTRAINT "EXPECTED_MESSAGE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."EXPECTED_MESSAGE_PK";

CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_PK" ON "VIT_VDX"."FIELD_DATA_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."FIELD_DATA_TYPE" ADD CONSTRAINT "FIELD_DATA_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."FIELD_DATA_TYPE_PK";

CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_PK" ON "VIT_VDX"."FIELD_DATA_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."FIELD_DATA_TYPE_TR" ADD CONSTRAINT "FIELD_DATA_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."FORMAT_TYPE_PK" ON "VIT_VDX"."FORMAT_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."FORMAT_TYPE" ADD CONSTRAINT "FORMAT_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."FORMAT_TYPE_PK";

CREATE INDEX "VIT_VDX"."FORMAT_TYPE_TR_PK" ON "VIT_VDX"."FORMAT_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."FORMAT_TYPE_TR" ADD CONSTRAINT "FORMAT_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."FORMAT_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_PK" ON "VIT_VDX"."MEASUREMENT_UNIT"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MEASUREMENT_UNIT" ADD CONSTRAINT "MEASUREMENT_UNIT_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MEASUREMENT_UNIT_PK";

CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_PK" ON "VIT_VDX"."MEASUREMENT_UNIT_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MEASUREMENT_UNIT_TR" ADD CONSTRAINT "MEASUREMENT_UNIT_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_PK" ON "VIT_VDX"."MESSAGE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT "MESSAGE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_FORMAT_PK" ON "VIT_VDX"."MESSAGE_FORMAT"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_FORMAT" ADD CONSTRAINT "MESSAGE_FORMAT_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_FORMAT_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_PARAM_PK" ON "VIT_VDX"."MESSAGE_PARAM"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_PARAM" ADD CONSTRAINT "MESSAGE_PARAM_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_PARAM_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_RESPONSE_PK" ON "VIT_VDX"."MESSAGE_RESPONSE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_RESPONSE" ADD CONSTRAINT "MESSAGE_RESPONSE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_RESPONSE_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_SCHEMA_PK" ON "VIT_VDX"."MESSAGE_SCHEMA"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_SCHEMA" ADD CONSTRAINT "MESSAGE_SCHEMA_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_SCHEMA_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_PK" ON "VIT_VDX"."MESSAGE_STATUS"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_STATUS" ADD CONSTRAINT "MESSAGE_STATUS_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_STATUS_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_PK" ON "VIT_VDX"."MESSAGE_STATUS_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_STATUS_TR" ADD CONSTRAINT "MESSAGE_STATUS_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_STATUS_TR_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PK" ON "VIT_VDX"."MESSAGE_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE" ADD CONSTRAINT "MESSAGE_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_TYPE_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_PK" ON "VIT_VDX"."MESSAGE_TYPE_PARAM"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE_PARAM" ADD CONSTRAINT "MESSAGE_TYPE_PARAM_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_PK";

CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_PK" ON "VIT_VDX"."MESSAGE_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE_TR" ADD CONSTRAINT "MESSAGE_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MESSAGE_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."MSG_PAYLOAD_PK" ON "VIT_VDX"."MSG_PAYLOAD"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."MSG_PAYLOAD" ADD CONSTRAINT "MSG_PAYLOAD_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."MSG_PAYLOAD_PK";

CREATE INDEX "VIT_VDX"."PARAMETER_PK" ON "VIT_VDX"."PARAMETER"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAMETER" ADD CONSTRAINT "PARAMETER_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAMETER_PK";

CREATE INDEX "VIT_VDX"."PARAMETER_MAP_PK" ON "VIT_VDX"."PARAMETER_MAP"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAMETER_MAP" ADD CONSTRAINT "PARAMETER_MAP_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAMETER_MAP_PK";

CREATE INDEX "VIT_VDX"."PARAMETER_TR_PK" ON "VIT_VDX"."PARAMETER_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAMETER_TR" ADD CONSTRAINT "PARAMETER_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAMETER_TR_PK";

CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_PK" ON "VIT_VDX"."PARAMETER_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAMETER_TYPE" ADD CONSTRAINT "PARAMETER_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAMETER_TYPE_PK";

CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_PK" ON "VIT_VDX"."PARAMETER_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAMETER_TYPE_TR" ADD CONSTRAINT "PARAMETER_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAMETER_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."PARAM_VALUE_PK" ON "VIT_VDX"."PARAM_VALUE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARAM_VALUE" ADD CONSTRAINT "PARAM_VALUE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARAM_VALUE_PK";

CREATE INDEX "VIT_VDX"."PARTY_PK" ON "VIT_VDX"."PARTY"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY" ADD CONSTRAINT "PARTY_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_PK";

CREATE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_PK" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" ADD CONSTRAINT "PARTY_ATTRIBT_TYP_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_PK";

CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_PK" ON "VIT_VDX"."PARTY_ATTRIBUTE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBUTE" ADD CONSTRAINT "PARTY_ATTRIBUTE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ATTRIBUTE_PK";

CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_PK" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBUTE_TYPE" ADD CONSTRAINT "PARTY_ATTRIBUTE_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_PK";

CREATE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_PK" ON "VIT_VDX"."PARTY_MESSAGE_STREAM"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT "PARTY_MESSAGE_STREAM_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_PK";

CREATE INDEX "VIT_VDX"."PARTY_ROLE_PK" ON "VIT_VDX"."PARTY_ROLE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ROLE" ADD CONSTRAINT "PARTY_ROLE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ROLE_PK";

CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_PK" ON "VIT_VDX"."PARTY_ROLE_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ROLE_TYPE" ADD CONSTRAINT "PARTY_ROLE_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ROLE_TYPE_PK";

CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_PK" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_ROLE_TYPE_TR" ADD CONSTRAINT "PARTY_ROLE_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."PARTY_RULE_MAP_PK" ON "VIT_VDX"."PARTY_RULE_MAP"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_RULE_MAP" ADD CONSTRAINT "PARTY_RULE_MAP_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_RULE_MAP_PK";

CREATE INDEX "VIT_VDX"."PARTY_SLA_PK" ON "VIT_VDX"."PARTY_SLA"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."PARTY_SLA" ADD CONSTRAINT "PARTY_SLA_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."PARTY_SLA_PK";

CREATE INDEX "VIT_VDX"."RULE_PK" ON "VIT_VDX"."RULE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."RULE" ADD CONSTRAINT "RULE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."RULE_PK";

CREATE INDEX "VIT_VDX"."RULE_ACTION_PK" ON "VIT_VDX"."RULE_ACTION"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."RULE_ACTION" ADD CONSTRAINT "RULE_ACTION_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."RULE_ACTION_PK";

CREATE INDEX "VIT_VDX"."SLA_PK" ON "VIT_VDX"."SLA"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT "SLA_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SLA_PK";

CREATE INDEX "VIT_VDX"."SLA_LEVEL_PK" ON "VIT_VDX"."SLA_LEVEL"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SLA_LEVEL" ADD CONSTRAINT "SLA_LEVEL_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SLA_LEVEL_PK";

CREATE INDEX "VIT_VDX"."SLA_LEVEL_TR_PK" ON "VIT_VDX"."SLA_LEVEL_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SLA_LEVEL_TR" ADD CONSTRAINT "SLA_LEVEL_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SLA_LEVEL_TR_PK";

CREATE INDEX "VIT_VDX"."SLA_TYPE_PK" ON "VIT_VDX"."SLA_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SLA_TYPE" ADD CONSTRAINT "SLA_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SLA_TYPE_PK";

CREATE INDEX "VIT_VDX"."SLA_TYPE_TR_PK" ON "VIT_VDX"."SLA_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SLA_TYPE_TR" ADD CONSTRAINT "SLA_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SLA_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."STREAM_TYPE_PK" ON "VIT_VDX"."STREAM_TYPE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."STREAM_TYPE" ADD CONSTRAINT "STREAM_TYPE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."STREAM_TYPE_PK";

CREATE INDEX "VIT_VDX"."STREAM_TYPE_TR_PK" ON "VIT_VDX"."STREAM_TYPE_TR"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."STREAM_TYPE_TR" ADD CONSTRAINT "STREAM_TYPE_TR_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."STREAM_TYPE_TR_PK";

CREATE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_PK" ON "VIT_VDX"."SYSTEM_LANGUAGE"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."SYSTEM_LANGUAGE" ADD CONSTRAINT "SYSTEM_LANGUAGE_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."SYSTEM_LANGUAGE_PK";

CREATE INDEX "VIT_VDX"."TYPE_PARAM_PK" ON "VIT_VDX"."TYPE_PARAM"("ID") TABLESPACE VDX_DATA_SWITCH_INDX;
ALTER TABLE "VIT_VDX"."TYPE_PARAM" ADD CONSTRAINT "TYPE_PARAM_PK" PRIMARY KEY ("ID") USING INDEX "VIT_VDX"."TYPE_PARAM_PK";


CREATE UNIQUE INDEX "VIT_VDX"."ACTION_PARAMETER_02U" ON "VIT_VDX"."ACTION_PARAMETER"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_PARAMETER_03N" ON "VIT_VDX"."ACTION_PARAMETER"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_PARAMETER_AUDIT_01N" ON "VIT_VDX"."ACTION_PARAMETER_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_PARAMETER_AUDIT_02N" ON "VIT_VDX"."ACTION_PARAMETER_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_PARAMETER_AUDIT_03N" ON "VIT_VDX"."ACTION_PARAMETER_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."ACTION_TYPE_02U" ON "VIT_VDX"."ACTION_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ACTION_TYPE_03U" ON "VIT_VDX"."ACTION_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ACTION_TYPE_04U" ON "VIT_VDX"."ACTION_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_05N" ON "VIT_VDX"."ACTION_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_AUDIT_01N" ON "VIT_VDX"."ACTION_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_AUDIT_02N" ON "VIT_VDX"."ACTION_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_AUDIT_03N" ON "VIT_VDX"."ACTION_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."ACTION_TYPE_TR_02U" ON "VIT_VDX"."ACTION_TYPE_TR"("TENANT", "ACTION_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ACTION_TYPE_TR_03U" ON "VIT_VDX"."ACTION_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_TR_04N" ON "VIT_VDX"."ACTION_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."ACTION_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."ACTION_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ACTION_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."ACTION_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSITORY_02U" ON "VIT_VDX"."DATA_REPOSITORY"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_03N" ON "VIT_VDX"."DATA_REPOSITORY"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_AUDIT_01N" ON "VIT_VDX"."DATA_REPOSITORY_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_AUDIT_02N" ON "VIT_VDX"."DATA_REPOSITORY_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_AUDIT_03N" ON "VIT_VDX"."DATA_REPOSITORY_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_02U" ON "VIT_VDX"."DATA_REPOSITORY_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_03U" ON "VIT_VDX"."DATA_REPOSITORY_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_04U" ON "VIT_VDX"."DATA_REPOSITORY_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_05N" ON "VIT_VDX"."DATA_REPOSITORY_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT_01N" ON "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT_02N" ON "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT_03N" ON "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_02U" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR"("TENANT", "DATA_REPOSITORY_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_03U" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_04N" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT_01N" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT_02N" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT_03N" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."ERROR_TYPE_02U" ON "VIT_VDX"."ERROR_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ERROR_TYPE_03U" ON "VIT_VDX"."ERROR_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ERROR_TYPE_04U" ON "VIT_VDX"."ERROR_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_05N" ON "VIT_VDX"."ERROR_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_AUDIT_01N" ON "VIT_VDX"."ERROR_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_AUDIT_02N" ON "VIT_VDX"."ERROR_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_AUDIT_03N" ON "VIT_VDX"."ERROR_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."ERROR_TYPE_TR_02U" ON "VIT_VDX"."ERROR_TYPE_TR"("TENANT", "ERROR_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."ERROR_TYPE_TR_03U" ON "VIT_VDX"."ERROR_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_TR_04N" ON "VIT_VDX"."ERROR_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."ERROR_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."ERROR_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."ERROR_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."ERROR_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."EVENT_TYPE_02U" ON "VIT_VDX"."EVENT_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."EVENT_TYPE_03U" ON "VIT_VDX"."EVENT_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."EVENT_TYPE_04U" ON "VIT_VDX"."EVENT_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_05N" ON "VIT_VDX"."EVENT_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_AUDIT_01N" ON "VIT_VDX"."EVENT_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_AUDIT_02N" ON "VIT_VDX"."EVENT_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_AUDIT_03N" ON "VIT_VDX"."EVENT_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."EVENT_TYPE_TR_02U" ON "VIT_VDX"."EVENT_TYPE_TR"("TENANT", "EVENT_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."EVENT_TYPE_TR_03U" ON "VIT_VDX"."EVENT_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_TR_04N" ON "VIT_VDX"."EVENT_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."EVENT_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."EVENT_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EVENT_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."EVENT_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."EXPECTED_MESSAGE_02U" ON "VIT_VDX"."EXPECTED_MESSAGE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EXPECTED_MESSAGE_03N" ON "VIT_VDX"."EXPECTED_MESSAGE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EXPECTED_MESSAGE_AUDIT_01N" ON "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EXPECTED_MESSAGE_AUDIT_02N" ON "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."EXPECTED_MESSAGE_AUDIT_03N" ON "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."FIELD_DATA_TYPE_02U" ON "VIT_VDX"."FIELD_DATA_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FIELD_DATA_TYPE_03U" ON "VIT_VDX"."FIELD_DATA_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FIELD_DATA_TYPE_04U" ON "VIT_VDX"."FIELD_DATA_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_05N" ON "VIT_VDX"."FIELD_DATA_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_AUDIT_01N" ON "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_AUDIT_02N" ON "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_AUDIT_03N" ON "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_02U" ON "VIT_VDX"."FIELD_DATA_TYPE_TR"("TENANT", "FIELD_DATA_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_03U" ON "VIT_VDX"."FIELD_DATA_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_04N" ON "VIT_VDX"."FIELD_DATA_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."FORMAT_TYPE_02U" ON "VIT_VDX"."FORMAT_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FORMAT_TYPE_03U" ON "VIT_VDX"."FORMAT_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FORMAT_TYPE_04U" ON "VIT_VDX"."FORMAT_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_05N" ON "VIT_VDX"."FORMAT_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_AUDIT_01N" ON "VIT_VDX"."FORMAT_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_AUDIT_02N" ON "VIT_VDX"."FORMAT_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_AUDIT_03N" ON "VIT_VDX"."FORMAT_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."FORMAT_TYPE_TR_02U" ON "VIT_VDX"."FORMAT_TYPE_TR"("TENANT", "FORMAT_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."FORMAT_TYPE_TR_03U" ON "VIT_VDX"."FORMAT_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_TR_04N" ON "VIT_VDX"."FORMAT_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."FORMAT_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MEASUREMENT_UNIT_02U" ON "VIT_VDX"."MEASUREMENT_UNIT"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MEASUREMENT_UNIT_03U" ON "VIT_VDX"."MEASUREMENT_UNIT"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MEASUREMENT_UNIT_04U" ON "VIT_VDX"."MEASUREMENT_UNIT"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_05N" ON "VIT_VDX"."MEASUREMENT_UNIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_AUDIT_01N" ON "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_AUDIT_02N" ON "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_AUDIT_03N" ON "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_02U" ON "VIT_VDX"."MEASUREMENT_UNIT_TR"("TENANT", "MEASUREMENT_UNIT_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_03U" ON "VIT_VDX"."MEASUREMENT_UNIT_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_04N" ON "VIT_VDX"."MEASUREMENT_UNIT_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT_01N" ON "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT_02N" ON "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT_03N" ON "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_02U" ON "VIT_VDX"."MESSAGE"("TENANT", "BAR_CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_03U" ON "VIT_VDX"."MESSAGE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_04N" ON "VIT_VDX"."MESSAGE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_AUDIT_01N" ON "VIT_VDX"."MESSAGE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_AUDIT_02N" ON "VIT_VDX"."MESSAGE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_AUDIT_03N" ON "VIT_VDX"."MESSAGE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_FORMAT_02U" ON "VIT_VDX"."MESSAGE_FORMAT"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_FORMAT_03N" ON "VIT_VDX"."MESSAGE_FORMAT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_FORMAT_AUDIT_01N" ON "VIT_VDX"."MESSAGE_FORMAT_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_FORMAT_AUDIT_02N" ON "VIT_VDX"."MESSAGE_FORMAT_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_FORMAT_AUDIT_03N" ON "VIT_VDX"."MESSAGE_FORMAT_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_PARAM_02U" ON "VIT_VDX"."MESSAGE_PARAM"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_PARAM_03N" ON "VIT_VDX"."MESSAGE_PARAM"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_PARAM_AUDIT_01N" ON "VIT_VDX"."MESSAGE_PARAM_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_PARAM_AUDIT_02N" ON "VIT_VDX"."MESSAGE_PARAM_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_PARAM_AUDIT_03N" ON "VIT_VDX"."MESSAGE_PARAM_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_RESPONSE_02U" ON "VIT_VDX"."MESSAGE_RESPONSE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_RESPONSE_03N" ON "VIT_VDX"."MESSAGE_RESPONSE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_RESPONSE_AUDIT_01N" ON "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_RESPONSE_AUDIT_02N" ON "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_RESPONSE_AUDIT_03N" ON "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_SCHEMA_02U" ON "VIT_VDX"."MESSAGE_SCHEMA"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_SCHEMA_03N" ON "VIT_VDX"."MESSAGE_SCHEMA"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_SCHEMA_AUDIT_01N" ON "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_SCHEMA_AUDIT_02N" ON "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_SCHEMA_AUDIT_03N" ON "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_STATUS_02U" ON "VIT_VDX"."MESSAGE_STATUS"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_STATUS_03U" ON "VIT_VDX"."MESSAGE_STATUS"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_STATUS_04U" ON "VIT_VDX"."MESSAGE_STATUS"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_05N" ON "VIT_VDX"."MESSAGE_STATUS"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_AUDIT_01N" ON "VIT_VDX"."MESSAGE_STATUS_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_AUDIT_02N" ON "VIT_VDX"."MESSAGE_STATUS_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_AUDIT_03N" ON "VIT_VDX"."MESSAGE_STATUS_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_02U" ON "VIT_VDX"."MESSAGE_STATUS_TR"("TENANT", "MESSAGE_STATUS_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_03U" ON "VIT_VDX"."MESSAGE_STATUS_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_04N" ON "VIT_VDX"."MESSAGE_STATUS_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT_01N" ON "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT_02N" ON "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT_03N" ON "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_02U" ON "VIT_VDX"."MESSAGE_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_03U" ON "VIT_VDX"."MESSAGE_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_04U" ON "VIT_VDX"."MESSAGE_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_05N" ON "VIT_VDX"."MESSAGE_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_AUDIT_01N" ON "VIT_VDX"."MESSAGE_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_AUDIT_02N" ON "VIT_VDX"."MESSAGE_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_AUDIT_03N" ON "VIT_VDX"."MESSAGE_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_02U" ON "VIT_VDX"."MESSAGE_TYPE_PARAM"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_03N" ON "VIT_VDX"."MESSAGE_TYPE_PARAM"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT_01N" ON "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT_02N" ON "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT_03N" ON "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_02U" ON "VIT_VDX"."MESSAGE_TYPE_TR"("TENANT", "MESSAGE_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_03U" ON "VIT_VDX"."MESSAGE_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_04N" ON "VIT_VDX"."MESSAGE_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."MSG_PAYLOAD_02U" ON "VIT_VDX"."MSG_PAYLOAD"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MSG_PAYLOAD_03N" ON "VIT_VDX"."MSG_PAYLOAD"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MSG_PAYLOAD_AUDIT_01N" ON "VIT_VDX"."MSG_PAYLOAD_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MSG_PAYLOAD_AUDIT_02N" ON "VIT_VDX"."MSG_PAYLOAD_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."MSG_PAYLOAD_AUDIT_03N" ON "VIT_VDX"."MSG_PAYLOAD_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_02U" ON "VIT_VDX"."PARAMETER"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_03U" ON "VIT_VDX"."PARAMETER"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_04U" ON "VIT_VDX"."PARAMETER"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_05N" ON "VIT_VDX"."PARAMETER"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_AUDIT_01N" ON "VIT_VDX"."PARAMETER_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_AUDIT_02N" ON "VIT_VDX"."PARAMETER_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_AUDIT_03N" ON "VIT_VDX"."PARAMETER_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_MAP_02U" ON "VIT_VDX"."PARAMETER_MAP"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_MAP_03N" ON "VIT_VDX"."PARAMETER_MAP"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_MAP_AUDIT_01N" ON "VIT_VDX"."PARAMETER_MAP_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_MAP_AUDIT_02N" ON "VIT_VDX"."PARAMETER_MAP_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_MAP_AUDIT_03N" ON "VIT_VDX"."PARAMETER_MAP_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TR_02U" ON "VIT_VDX"."PARAMETER_TR"("TENANT", "PARAMETER_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TR_03U" ON "VIT_VDX"."PARAMETER_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TR_04N" ON "VIT_VDX"."PARAMETER_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TR_AUDIT_01N" ON "VIT_VDX"."PARAMETER_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TR_AUDIT_02N" ON "VIT_VDX"."PARAMETER_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TR_AUDIT_03N" ON "VIT_VDX"."PARAMETER_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TYPE_02U" ON "VIT_VDX"."PARAMETER_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TYPE_03U" ON "VIT_VDX"."PARAMETER_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TYPE_04U" ON "VIT_VDX"."PARAMETER_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_05N" ON "VIT_VDX"."PARAMETER_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_AUDIT_01N" ON "VIT_VDX"."PARAMETER_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_AUDIT_02N" ON "VIT_VDX"."PARAMETER_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_AUDIT_03N" ON "VIT_VDX"."PARAMETER_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_02U" ON "VIT_VDX"."PARAMETER_TYPE_TR"("TENANT", "PARAMETER_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_03U" ON "VIT_VDX"."PARAMETER_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_04N" ON "VIT_VDX"."PARAMETER_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARAM_VALUE_02U" ON "VIT_VDX"."PARAM_VALUE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAM_VALUE_03N" ON "VIT_VDX"."PARAM_VALUE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAM_VALUE_AUDIT_01N" ON "VIT_VDX"."PARAM_VALUE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAM_VALUE_AUDIT_02N" ON "VIT_VDX"."PARAM_VALUE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARAM_VALUE_AUDIT_03N" ON "VIT_VDX"."PARAM_VALUE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_02U" ON "VIT_VDX"."PARTY"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_03N" ON "VIT_VDX"."PARTY"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_AUDIT_01N" ON "VIT_VDX"."PARTY_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_AUDIT_02N" ON "VIT_VDX"."PARTY_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_AUDIT_03N" ON "VIT_VDX"."PARTY_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_02U" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR"("TENANT", "PARTY_ATTRIBUTE_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_03U" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_04N" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT_01N" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT_02N" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT_03N" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_02U" ON "VIT_VDX"."PARTY_ATTRIBUTE"("TENANT", "PARTY_ATTRIBUTE_TYPE_ID", "PARTY_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_03U" ON "VIT_VDX"."PARTY_ATTRIBUTE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_04N" ON "VIT_VDX"."PARTY_ATTRIBUTE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT_01N" ON "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT_02N" ON "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT_03N" ON "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_02U" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_03U" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_04U" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_05N" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT_01N" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT_02N" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT_03N" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_02U" ON "VIT_VDX"."PARTY_MESSAGE_STREAM"("TENANT", "SOURCE_HOST", "STREAM_IDENTIFIER") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_03U" ON "VIT_VDX"."PARTY_MESSAGE_STREAM"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_04N" ON "VIT_VDX"."PARTY_MESSAGE_STREAM"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT_01N" ON "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT_02N" ON "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT_03N" ON "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_02U" ON "VIT_VDX"."PARTY_ROLE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_03N" ON "VIT_VDX"."PARTY_ROLE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_AUDIT_01N" ON "VIT_VDX"."PARTY_ROLE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_AUDIT_02N" ON "VIT_VDX"."PARTY_ROLE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_AUDIT_03N" ON "VIT_VDX"."PARTY_ROLE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_02U" ON "VIT_VDX"."PARTY_ROLE_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_03U" ON "VIT_VDX"."PARTY_ROLE_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_04U" ON "VIT_VDX"."PARTY_ROLE_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_05N" ON "VIT_VDX"."PARTY_ROLE_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT_01N" ON "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT_02N" ON "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT_03N" ON "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_02U" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR"("TENANT", "PARTY_ROLE_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_03U" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_04N" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_RULE_MAP_02U" ON "VIT_VDX"."PARTY_RULE_MAP"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_RULE_MAP_03N" ON "VIT_VDX"."PARTY_RULE_MAP"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_RULE_MAP_AUDIT_01N" ON "VIT_VDX"."PARTY_RULE_MAP_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_RULE_MAP_AUDIT_02N" ON "VIT_VDX"."PARTY_RULE_MAP_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_RULE_MAP_AUDIT_03N" ON "VIT_VDX"."PARTY_RULE_MAP_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."PARTY_SLA_02U" ON "VIT_VDX"."PARTY_SLA"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_SLA_03N" ON "VIT_VDX"."PARTY_SLA"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_SLA_AUDIT_01N" ON "VIT_VDX"."PARTY_SLA_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_SLA_AUDIT_02N" ON "VIT_VDX"."PARTY_SLA_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."PARTY_SLA_AUDIT_03N" ON "VIT_VDX"."PARTY_SLA_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."RULE_02U" ON "VIT_VDX"."RULE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_03N" ON "VIT_VDX"."RULE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_AUDIT_01N" ON "VIT_VDX"."RULE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_AUDIT_02N" ON "VIT_VDX"."RULE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_AUDIT_03N" ON "VIT_VDX"."RULE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."RULE_ACTION_02U" ON "VIT_VDX"."RULE_ACTION"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_ACTION_03N" ON "VIT_VDX"."RULE_ACTION"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_ACTION_AUDIT_01N" ON "VIT_VDX"."RULE_ACTION_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_ACTION_AUDIT_02N" ON "VIT_VDX"."RULE_ACTION_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."RULE_ACTION_AUDIT_03N" ON "VIT_VDX"."RULE_ACTION_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SLA_02U" ON "VIT_VDX"."SLA"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_03N" ON "VIT_VDX"."SLA"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_AUDIT_01N" ON "VIT_VDX"."SLA_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_AUDIT_02N" ON "VIT_VDX"."SLA_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_AUDIT_03N" ON "VIT_VDX"."SLA_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SLA_LEVEL_02U" ON "VIT_VDX"."SLA_LEVEL"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_LEVEL_03U" ON "VIT_VDX"."SLA_LEVEL"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_LEVEL_04U" ON "VIT_VDX"."SLA_LEVEL"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_05N" ON "VIT_VDX"."SLA_LEVEL"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_AUDIT_01N" ON "VIT_VDX"."SLA_LEVEL_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_AUDIT_02N" ON "VIT_VDX"."SLA_LEVEL_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_AUDIT_03N" ON "VIT_VDX"."SLA_LEVEL_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SLA_LEVEL_TR_02U" ON "VIT_VDX"."SLA_LEVEL_TR"("TENANT", "SLA_LEVEL_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_LEVEL_TR_03U" ON "VIT_VDX"."SLA_LEVEL_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_TR_04N" ON "VIT_VDX"."SLA_LEVEL_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_TR_AUDIT_01N" ON "VIT_VDX"."SLA_LEVEL_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_TR_AUDIT_02N" ON "VIT_VDX"."SLA_LEVEL_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_LEVEL_TR_AUDIT_03N" ON "VIT_VDX"."SLA_LEVEL_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SLA_TYPE_02U" ON "VIT_VDX"."SLA_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_TYPE_03U" ON "VIT_VDX"."SLA_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_TYPE_04U" ON "VIT_VDX"."SLA_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_05N" ON "VIT_VDX"."SLA_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_AUDIT_01N" ON "VIT_VDX"."SLA_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_AUDIT_02N" ON "VIT_VDX"."SLA_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_AUDIT_03N" ON "VIT_VDX"."SLA_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SLA_TYPE_TR_02U" ON "VIT_VDX"."SLA_TYPE_TR"("TENANT", "SLA_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."SLA_TYPE_TR_03U" ON "VIT_VDX"."SLA_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_TR_04N" ON "VIT_VDX"."SLA_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."SLA_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."SLA_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SLA_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."SLA_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."STREAM_TYPE_02U" ON "VIT_VDX"."STREAM_TYPE"("TENANT", "CODE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."STREAM_TYPE_03U" ON "VIT_VDX"."STREAM_TYPE"("TENANT", "KEY") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."STREAM_TYPE_04U" ON "VIT_VDX"."STREAM_TYPE"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_05N" ON "VIT_VDX"."STREAM_TYPE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_AUDIT_01N" ON "VIT_VDX"."STREAM_TYPE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_AUDIT_02N" ON "VIT_VDX"."STREAM_TYPE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_AUDIT_03N" ON "VIT_VDX"."STREAM_TYPE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."STREAM_TYPE_TR_02U" ON "VIT_VDX"."STREAM_TYPE_TR"("TENANT", "STREAM_TYPE_ID", "SYSTEM_LANGUAGE_ID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE UNIQUE INDEX "VIT_VDX"."STREAM_TYPE_TR_03U" ON "VIT_VDX"."STREAM_TYPE_TR"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_TR_04N" ON "VIT_VDX"."STREAM_TYPE_TR"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_TR_AUDIT_01N" ON "VIT_VDX"."STREAM_TYPE_TR_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_TR_AUDIT_02N" ON "VIT_VDX"."STREAM_TYPE_TR_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."STREAM_TYPE_TR_AUDIT_03N" ON "VIT_VDX"."STREAM_TYPE_TR_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_02U" ON "VIT_VDX"."SYSTEM_LANGUAGE"("TENANT", "LANGUAGE_TAG") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_03N" ON "VIT_VDX"."SYSTEM_LANGUAGE"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT_01N" ON "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT_02N" ON "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT_03N" ON "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


CREATE UNIQUE INDEX "VIT_VDX"."TYPE_PARAM_02U" ON "VIT_VDX"."TYPE_PARAM"("TENANT", "UUID") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."TYPE_PARAM_03N" ON "VIT_VDX"."TYPE_PARAM"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."TYPE_PARAM_AUDIT_01N" ON "VIT_VDX"."TYPE_PARAM_AUDIT"("TENANT", "DATE_TIME_LAST_MODIFIED") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."TYPE_PARAM_AUDIT_02N" ON "VIT_VDX"."TYPE_PARAM_AUDIT"("TENANT", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;
CREATE INDEX "VIT_VDX"."TYPE_PARAM_AUDIT_03N" ON "VIT_VDX"."TYPE_PARAM_AUDIT"("TENANT", "ID", "AUDIT_DATE") TABLESPACE VDX_DATA_SWITCH_INDX;


ALTER TABLE "VIT_VDX"."ACTION_PARAMETER" ADD CONSTRAINT ACTION_PARAMETER_FK01 FOREIGN KEY ("PARAMETER_ID") REFERENCES "VIT_VDX"."PARAMETER"("ID");
ALTER TABLE "VIT_VDX"."ACTION_PARAMETER" ADD CONSTRAINT ACTION_PARAMETER_FK02 FOREIGN KEY ("ACTION_TYPE_ID") REFERENCES "VIT_VDX"."ACTION_TYPE"("ID");
ALTER TABLE "VIT_VDX"."ACTION_TYPE" ADD CONSTRAINT ACTION_TYPE_FK01 FOREIGN KEY ("ERROR_TYPE_ID") REFERENCES "VIT_VDX"."ERROR_TYPE"("ID");
ALTER TABLE "VIT_VDX"."ACTION_TYPE" ADD CONSTRAINT ACTION_TYPE_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."ACTION_TYPE_TR" ADD CONSTRAINT ACTION_TYPE_TR_FK01 FOREIGN KEY ("ACTION_TYPE_ID") REFERENCES "VIT_VDX"."ACTION_TYPE"("ID");
ALTER TABLE "VIT_VDX"."ACTION_TYPE_TR" ADD CONSTRAINT ACTION_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."DATA_REPOSITORY" ADD CONSTRAINT DATA_REPOSITORY_FK01 FOREIGN KEY ("DATA_REPOSITORY_TYPE_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY_TYPE"("ID");
ALTER TABLE "VIT_VDX"."DATA_REPOSITORY_TYPE" ADD CONSTRAINT DATA_REPOSITORY_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."DATA_REPOSTRY_TYP_TR" ADD CONSTRAINT DATA_REPOSTRY_TYP_TR_FK01 FOREIGN KEY ("DATA_REPOSITORY_TYPE_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY_TYPE"("ID");
ALTER TABLE "VIT_VDX"."DATA_REPOSTRY_TYP_TR" ADD CONSTRAINT DATA_REPOSTRY_TYP_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."ERROR_TYPE" ADD CONSTRAINT ERROR_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."ERROR_TYPE_TR" ADD CONSTRAINT ERROR_TYPE_TR_FK01 FOREIGN KEY ("ERROR_TYPE_ID") REFERENCES "VIT_VDX"."ERROR_TYPE"("ID");
ALTER TABLE "VIT_VDX"."ERROR_TYPE_TR" ADD CONSTRAINT ERROR_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."EVENT_TYPE" ADD CONSTRAINT EVENT_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."EVENT_TYPE_TR" ADD CONSTRAINT EVENT_TYPE_TR_FK01 FOREIGN KEY ("EVENT_TYPE_ID") REFERENCES "VIT_VDX"."EVENT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."EVENT_TYPE_TR" ADD CONSTRAINT EVENT_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."EXPECTED_MESSAGE" ADD CONSTRAINT EXPECTED_MESSAGE_FK01 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."EXPECTED_MESSAGE" ADD CONSTRAINT EXPECTED_MESSAGE_FK02 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."EXPECTED_MESSAGE" ADD CONSTRAINT EXPECTED_MESSAGE_FK03 FOREIGN KEY ("MESSAGE_STATUS_ID") REFERENCES "VIT_VDX"."MESSAGE_STATUS"("ID");
ALTER TABLE "VIT_VDX"."FIELD_DATA_TYPE" ADD CONSTRAINT FIELD_DATA_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."FIELD_DATA_TYPE_TR" ADD CONSTRAINT FIELD_DATA_TYPE_TR_FK01 FOREIGN KEY ("FIELD_DATA_TYPE_ID") REFERENCES "VIT_VDX"."FIELD_DATA_TYPE"("ID");
ALTER TABLE "VIT_VDX"."FIELD_DATA_TYPE_TR" ADD CONSTRAINT FIELD_DATA_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."FORMAT_TYPE" ADD CONSTRAINT FORMAT_TYPE_FK01 FOREIGN KEY ("MESSAGE_SCHEMA_ID") REFERENCES "VIT_VDX"."MESSAGE_SCHEMA"("ID");
ALTER TABLE "VIT_VDX"."FORMAT_TYPE" ADD CONSTRAINT FORMAT_TYPE_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."FORMAT_TYPE_TR" ADD CONSTRAINT FORMAT_TYPE_TR_FK01 FOREIGN KEY ("FORMAT_TYPE_ID") REFERENCES "VIT_VDX"."FORMAT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."FORMAT_TYPE_TR" ADD CONSTRAINT FORMAT_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MEASUREMENT_UNIT" ADD CONSTRAINT MEASUREMENT_UNIT_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MEASUREMENT_UNIT_TR" ADD CONSTRAINT MEASUREMENT_UNIT_TR_FK01 FOREIGN KEY ("MEASUREMENT_UNIT_ID") REFERENCES "VIT_VDX"."MEASUREMENT_UNIT"("ID");
ALTER TABLE "VIT_VDX"."MEASUREMENT_UNIT_TR" ADD CONSTRAINT MEASUREMENT_UNIT_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK01 FOREIGN KEY ("MESSAGE_STATUS_ID") REFERENCES "VIT_VDX"."MESSAGE_STATUS"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK02 FOREIGN KEY ("MSG_PAYLOAD_ID") REFERENCES "VIT_VDX"."MSG_PAYLOAD"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK03 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK04 FOREIGN KEY ("MESSAGE_SCHEMA_ID") REFERENCES "VIT_VDX"."MESSAGE_SCHEMA"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK05 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE" ADD CONSTRAINT MESSAGE_FK06 FOREIGN KEY ("PARTY_MESSAGE_STREAM_ID") REFERENCES "VIT_VDX"."PARTY_MESSAGE_STREAM"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_FORMAT" ADD CONSTRAINT MESSAGE_FORMAT_FK01 FOREIGN KEY ("FORMAT_TYPE_ID") REFERENCES "VIT_VDX"."FORMAT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_FORMAT" ADD CONSTRAINT MESSAGE_FORMAT_FK03 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_FORMAT" ADD CONSTRAINT MESSAGE_FORMAT_FK04 FOREIGN KEY ("MESSAGE_SCHEMA_ID") REFERENCES "VIT_VDX"."MESSAGE_SCHEMA"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_PARAM" ADD CONSTRAINT MESSAGE_PARAM_FK01 FOREIGN KEY ("MESSAGE_TYPE_PARAM_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE_PARAM"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_PARAM" ADD CONSTRAINT MESSAGE_PARAM_FK02 FOREIGN KEY ("MESSAGE_ID") REFERENCES "VIT_VDX"."MESSAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_RESPONSE" ADD CONSTRAINT MESSAGE_RESPONSE_FK01 FOREIGN KEY ("MESSAGE_ID") REFERENCES "VIT_VDX"."MESSAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_RESPONSE" ADD CONSTRAINT MESSAGE_RESPONSE_FK02 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_SCHEMA" ADD CONSTRAINT MESSAGE_SCHEMA_FK01 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_STATUS" ADD CONSTRAINT MESSAGE_STATUS_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_STATUS_TR" ADD CONSTRAINT MESSAGE_STATUS_TR_FK01 FOREIGN KEY ("MESSAGE_STATUS_ID") REFERENCES "VIT_VDX"."MESSAGE_STATUS"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_STATUS_TR" ADD CONSTRAINT MESSAGE_STATUS_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE" ADD CONSTRAINT MESSAGE_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE_PARAM" ADD CONSTRAINT MESSAGE_TYPE_PARAM_FK01 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE_TR" ADD CONSTRAINT MESSAGE_TYPE_TR_FK01 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."MESSAGE_TYPE_TR" ADD CONSTRAINT MESSAGE_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER" ADD CONSTRAINT PARAMETER_FK01 FOREIGN KEY ("PARAMETER_TYPE_ID") REFERENCES "VIT_VDX"."PARAMETER_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER" ADD CONSTRAINT PARAMETER_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_MAP" ADD CONSTRAINT PARAMETER_MAP_FK01 FOREIGN KEY ("RULE_ACTION_ID") REFERENCES "VIT_VDX"."RULE_ACTION"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_MAP" ADD CONSTRAINT PARAMETER_MAP_FK02 FOREIGN KEY ("PARAMETER_ID") REFERENCES "VIT_VDX"."PARAMETER"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_TR" ADD CONSTRAINT PARAMETER_TR_FK01 FOREIGN KEY ("PARAMETER_ID") REFERENCES "VIT_VDX"."PARAMETER"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_TR" ADD CONSTRAINT PARAMETER_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_TYPE" ADD CONSTRAINT PARAMETER_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_TYPE_TR" ADD CONSTRAINT PARAMETER_TYPE_TR_FK01 FOREIGN KEY ("PARAMETER_TYPE_ID") REFERENCES "VIT_VDX"."PARAMETER_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARAMETER_TYPE_TR" ADD CONSTRAINT PARAMETER_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARAM_VALUE" ADD CONSTRAINT PARAM_VALUE_FK01 FOREIGN KEY ("MESSAGE_FORMAT_ID") REFERENCES "VIT_VDX"."MESSAGE_FORMAT"("ID");
ALTER TABLE "VIT_VDX"."PARAM_VALUE" ADD CONSTRAINT PARAM_VALUE_FK02 FOREIGN KEY ("FORMAT_TYPE_PARAM_ID") REFERENCES "VIT_VDX"."TYPE_PARAM"("ID");
ALTER TABLE "VIT_VDX"."PARAM_VALUE" ADD CONSTRAINT PARAM_VALUE_FK03 FOREIGN KEY ("REPOSITORY_TYPE_PARM_ID") REFERENCES "VIT_VDX"."TYPE_PARAM"("ID");
ALTER TABLE "VIT_VDX"."PARAM_VALUE" ADD CONSTRAINT PARAM_VALUE_FK04 FOREIGN KEY ("DATA_REPOSITORY_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" ADD CONSTRAINT PARTY_ATTRIBT_TYP_TR_FK01 FOREIGN KEY ("PARTY_ATTRIBUTE_TYPE_ID") REFERENCES "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" ADD CONSTRAINT PARTY_ATTRIBT_TYP_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBUTE" ADD CONSTRAINT PARTY_ATTRIBUTE_FK01 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBUTE" ADD CONSTRAINT PARTY_ATTRIBUTE_FK02 FOREIGN KEY ("PARTY_ATTRIBUTE_TYPE_ID") REFERENCES "VIT_VDX"."PARTY_ATTRIBUTE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ATTRIBUTE_TYPE" ADD CONSTRAINT PARTY_ATTRIBUTE_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK02 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK04 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK05 FOREIGN KEY ("OUTBOUND_MESSAG_FRMT_ID") REFERENCES "VIT_VDX"."MESSAGE_FORMAT"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK06 FOREIGN KEY ("INBOUND_MESSAGE_FRMT_ID") REFERENCES "VIT_VDX"."MESSAGE_FORMAT"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK07 FOREIGN KEY ("MESSAGE_SCHEMA_ID") REFERENCES "VIT_VDX"."MESSAGE_SCHEMA"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK08 FOREIGN KEY ("SOURCE_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK09 FOREIGN KEY ("SINK_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_MESSAGE_STREAM" ADD CONSTRAINT PARTY_MESSAGE_STREAM_FK10 FOREIGN KEY ("STREAM_TYPE_ID") REFERENCES "VIT_VDX"."STREAM_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ROLE" ADD CONSTRAINT PARTY_ROLE_FK01 FOREIGN KEY ("PARTY_ROLE_TYPE_ID") REFERENCES "VIT_VDX"."PARTY_ROLE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ROLE" ADD CONSTRAINT PARTY_ROLE_FK02 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ROLE_TYPE" ADD CONSTRAINT PARTY_ROLE_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ROLE_TYPE_TR" ADD CONSTRAINT PARTY_ROLE_TYPE_TR_FK01 FOREIGN KEY ("PARTY_ROLE_TYPE_ID") REFERENCES "VIT_VDX"."PARTY_ROLE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_ROLE_TYPE_TR" ADD CONSTRAINT PARTY_ROLE_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_RULE_MAP" ADD CONSTRAINT PARTY_RULE_MAP_FK01 FOREIGN KEY ("PARTY_RULE_ID") REFERENCES "VIT_VDX"."RULE"("ID");
ALTER TABLE "VIT_VDX"."PARTY_RULE_MAP" ADD CONSTRAINT PARTY_RULE_MAP_FK02 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."RULE" ADD CONSTRAINT RULE_FK02 FOREIGN KEY ("EVENT_TYPE_ID") REFERENCES "VIT_VDX"."EVENT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."RULE" ADD CONSTRAINT RULE_FK03 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."RULE_ACTION" ADD CONSTRAINT RULE_ACTION_FK01 FOREIGN KEY ("RULE_ID") REFERENCES "VIT_VDX"."RULE"("ID");
ALTER TABLE "VIT_VDX"."RULE_ACTION" ADD CONSTRAINT RULE_ACTION_FK02 FOREIGN KEY ("ACTION_TYPE_ID") REFERENCES "VIT_VDX"."ACTION_TYPE"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK01 FOREIGN KEY ("SLA_TYPE_ID") REFERENCES "VIT_VDX"."SLA_TYPE"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK02 FOREIGN KEY ("SLA_LEVEL_ID") REFERENCES "VIT_VDX"."SLA_LEVEL"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK03 FOREIGN KEY ("MEASUREMENT_UNIT_ID") REFERENCES "VIT_VDX"."MEASUREMENT_UNIT"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK04 FOREIGN KEY ("MESSAGE_TYPE_ID") REFERENCES "VIT_VDX"."MESSAGE_TYPE"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK05 FOREIGN KEY ("EVENT_TYPE_ID") REFERENCES "VIT_VDX"."EVENT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."SLA" ADD CONSTRAINT SLA_FK06 FOREIGN KEY ("PARTY_ID") REFERENCES "VIT_VDX"."PARTY"("ID");
ALTER TABLE "VIT_VDX"."SLA_LEVEL" ADD CONSTRAINT SLA_LEVEL_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."SLA_LEVEL_TR" ADD CONSTRAINT SLA_LEVEL_TR_FK01 FOREIGN KEY ("SLA_LEVEL_ID") REFERENCES "VIT_VDX"."SLA_LEVEL"("ID");
ALTER TABLE "VIT_VDX"."SLA_LEVEL_TR" ADD CONSTRAINT SLA_LEVEL_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."SLA_TYPE" ADD CONSTRAINT SLA_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."SLA_TYPE_TR" ADD CONSTRAINT SLA_TYPE_TR_FK01 FOREIGN KEY ("SLA_TYPE_ID") REFERENCES "VIT_VDX"."SLA_TYPE"("ID");
ALTER TABLE "VIT_VDX"."SLA_TYPE_TR" ADD CONSTRAINT SLA_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."STREAM_TYPE" ADD CONSTRAINT STREAM_TYPE_FK01 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."STREAM_TYPE_TR" ADD CONSTRAINT STREAM_TYPE_TR_FK01 FOREIGN KEY ("STREAM_TYPE_ID") REFERENCES "VIT_VDX"."STREAM_TYPE"("ID");
ALTER TABLE "VIT_VDX"."STREAM_TYPE_TR" ADD CONSTRAINT STREAM_TYPE_TR_FK02 FOREIGN KEY ("SYSTEM_LANGUAGE_ID") REFERENCES "VIT_VDX"."SYSTEM_LANGUAGE"("ID");
ALTER TABLE "VIT_VDX"."TYPE_PARAM" ADD CONSTRAINT TYPE_PARAM_FK01 FOREIGN KEY ("FORMAT_TYPE_ID") REFERENCES "VIT_VDX"."FORMAT_TYPE"("ID");
ALTER TABLE "VIT_VDX"."TYPE_PARAM" ADD CONSTRAINT TYPE_PARAM_FK02 FOREIGN KEY ("DATA_REPOSITORY_TYPE_ID") REFERENCES "VIT_VDX"."DATA_REPOSITORY_TYPE"("ID");
ALTER TABLE "VIT_VDX"."TYPE_PARAM" ADD CONSTRAINT TYPE_PARAM_FK03 FOREIGN KEY ("FIELD_DATA_TYPE_ID") REFERENCES "VIT_VDX"."FIELD_DATA_TYPE"("ID");
--changeset oracle:-1 (splitStatements:true endDelimiter:/ runOnChange:true)
CREATE OR REPLACE TRIGGER "VIT_VDX"."ACTION_PARAMETER_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ACTION_TYPE_ID", "PARAMETER_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."ACTION_PARAMETER" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."ACTION_PARAMETER_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."ACTION_PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "PARAMETER_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."PARAMETER_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."ACTION_PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "PARAMETER_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."PARAMETER_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."ACTION_PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "PARAMETER_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ACTION_TYPE_ID",
                :NEW."PARAMETER_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."ACTION_PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "PARAMETER_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."PARAMETER_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."ACTION_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "ERROR_TYPE_ID", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."ACTION_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."ACTION_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."ACTION_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."ACTION_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."ACTION_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."ERROR_TYPE_ID",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."ACTION_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."ACTION_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ACTION_TYPE_ID", "CODE", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."ACTION_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."ACTION_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."ACTION_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "CODE",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."ACTION_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "CODE",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."ACTION_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "CODE",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ACTION_TYPE_ID",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."ACTION_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "CODE",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."DATA_REPOSITORY_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "DATA_REPOSITORY_TYPE_ID", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."DATA_REPOSITORY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."DATA_REPOSITORY_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."DATA_REPOSITORY_TYPE_ID",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."DATA_REPOSITORY_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSITORY_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "DATA_REPOSITORY_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DATA_REPOSITORY_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DATA_REPOSITORY_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DATA_REPOSITORY_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."DATA_REPOSITORY_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."DATA_REPOSTRY_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DATA_REPOSITORY_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."ERROR_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."ERROR_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."ERROR_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."ERROR_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."ERROR_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."ERROR_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."ERROR_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."ERROR_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "ERROR_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."ERROR_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."ERROR_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."ERROR_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."ERROR_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."ERROR_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."ERROR_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."ERROR_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "ERROR_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."ERROR_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."EVENT_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."EVENT_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."EVENT_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."EVENT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."EVENT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."EVENT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."EVENT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."EVENT_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "EVENT_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."EVENT_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."EVENT_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."EVENT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "EVENT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."EVENT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."EVENT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "EVENT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."EVENT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."EVENT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "EVENT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."EVENT_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."EVENT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "EVENT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."EVENT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."EXPECTED_MESSAGE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "BARCODE", "EXPECTED_ARRIVAL_TIM", "EXPECTED_ARRIVAL_TIM_OFST", "EXPECTED_ARRIVAL_TIM_ZONE", "MESSAGE_STATUS_ID", "MESSAGE_TYPE_ID", "PARTY_ID", "RECEIVED_ON", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."EXPECTED_MESSAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."EXPECTED_MESSAGE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BARCODE",
                "EXPECTED_ARRIVAL_TIM",
                "EXPECTED_ARRIVAL_TIM_OFST",
                "EXPECTED_ARRIVAL_TIM_ZONE",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BARCODE",
                :OLD."EXPECTED_ARRIVAL_TIM",
                :OLD."EXPECTED_ARRIVAL_TIM_OFST",
                :OLD."EXPECTED_ARRIVAL_TIM_ZONE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BARCODE",
                "EXPECTED_ARRIVAL_TIM",
                "EXPECTED_ARRIVAL_TIM_OFST",
                "EXPECTED_ARRIVAL_TIM_ZONE",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BARCODE",
                :OLD."EXPECTED_ARRIVAL_TIM",
                :OLD."EXPECTED_ARRIVAL_TIM_OFST",
                :OLD."EXPECTED_ARRIVAL_TIM_ZONE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BARCODE",
                "EXPECTED_ARRIVAL_TIM",
                "EXPECTED_ARRIVAL_TIM_OFST",
                "EXPECTED_ARRIVAL_TIM_ZONE",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."BARCODE",
                :NEW."EXPECTED_ARRIVAL_TIM",
                :NEW."EXPECTED_ARRIVAL_TIM_OFST",
                :NEW."EXPECTED_ARRIVAL_TIM_ZONE",
                :NEW."MESSAGE_STATUS_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."PARTY_ID",
                :NEW."RECEIVED_ON",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."EXPECTED_MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BARCODE",
                "EXPECTED_ARRIVAL_TIM",
                "EXPECTED_ARRIVAL_TIM_OFST",
                "EXPECTED_ARRIVAL_TIM_ZONE",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BARCODE",
                :OLD."EXPECTED_ARRIVAL_TIM",
                :OLD."EXPECTED_ARRIVAL_TIM_OFST",
                :OLD."EXPECTED_ARRIVAL_TIM_ZONE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."FIELD_DATA_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."FIELD_DATA_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."FIELD_DATA_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "FIELD_DATA_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."FIELD_DATA_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FIELD_DATA_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FIELD_DATA_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FIELD_DATA_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."FIELD_DATA_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."FIELD_DATA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FIELD_DATA_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."FORMAT_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "FILE_EXTENSION", "KEY", "MESSAGE_SCHEMA_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."FORMAT_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."FORMAT_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FILE_EXTENSION",
                "KEY",
                "MESSAGE_SCHEMA_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FILE_EXTENSION",
                :OLD."KEY",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FILE_EXTENSION",
                "KEY",
                "MESSAGE_SCHEMA_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FILE_EXTENSION",
                :OLD."KEY",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FILE_EXTENSION",
                "KEY",
                "MESSAGE_SCHEMA_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."FILE_EXTENSION",
                :NEW."KEY",
                :NEW."MESSAGE_SCHEMA_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FILE_EXTENSION",
                "KEY",
                "MESSAGE_SCHEMA_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FILE_EXTENSION",
                :OLD."KEY",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."FORMAT_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "FORMAT_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."FORMAT_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."FORMAT_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FORMAT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FORMAT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FORMAT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FORMAT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FORMAT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."FORMAT_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."FORMAT_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "FORMAT_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."FORMAT_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MEASUREMENT_UNIT_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MEASUREMENT_UNIT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MEASUREMENT_UNIT_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "MEASUREMENT_UNIT_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MEASUREMENT_UNIT_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MEASUREMENT_UNIT_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MEASUREMENT_UNIT_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MEASUREMENT_UNIT_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."MEASUREMENT_UNIT_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MEASUREMENT_UNIT_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MEASUREMENT_UNIT_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "BAR_CODE", "BATCH_NUMBER", "DUPLICATE_HASH", "DUPLICATE_PARENT_ID", "EXTERNAL_ID", "GROUP_NAME", "IS_DUPLICATE", "LAST_MODIFIED_ON", "LAST_MODIFIED_ON_OFST", "LAST_MODIFIED_ON_ZONE", "MESSAGE_SCHEMA_ID", "MESSAGE_STATUS_ID", "MESSAGE_TYPE_ID", "MSG_PAYLOAD_ID", "PARENT_BAR_CODE", "PARTITION_KEY", "PARTY_ID", "PARTY_MESSAGE_STREAM_ID", "PROCESSED", "RECEIVED_ON", "RECEIVED_ON_OFST", "RECEIVED_ON_ZONE", "RECORD_TYPE", "RETRY_COUNT", "SEQUENCE_NUMBER", "TOTAL_MESSAGES", "TOTAL_SUBMITTED_MSGS", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BAR_CODE",
                "BATCH_NUMBER",
                "DUPLICATE_HASH",
                "DUPLICATE_PARENT_ID",
                "EXTERNAL_ID",
                "GROUP_NAME",
                "IS_DUPLICATE",
                "LAST_MODIFIED_ON",
                "LAST_MODIFIED_ON_OFST",
                "LAST_MODIFIED_ON_ZONE",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "MSG_PAYLOAD_ID",
                "PARENT_BAR_CODE",
                "PARTITION_KEY",
                "PARTY_ID",
                "PARTY_MESSAGE_STREAM_ID",
                "PROCESSED",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RECORD_TYPE",
                "RETRY_COUNT",
                "SEQUENCE_NUMBER",
                "TOTAL_MESSAGES",
                "TOTAL_SUBMITTED_MSGS",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BAR_CODE",
                :OLD."BATCH_NUMBER",
                :OLD."DUPLICATE_HASH",
                :OLD."DUPLICATE_PARENT_ID",
                :OLD."EXTERNAL_ID",
                :OLD."GROUP_NAME",
                :OLD."IS_DUPLICATE",
                :OLD."LAST_MODIFIED_ON",
                :OLD."LAST_MODIFIED_ON_OFST",
                :OLD."LAST_MODIFIED_ON_ZONE",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."MSG_PAYLOAD_ID",
                :OLD."PARENT_BAR_CODE",
                :OLD."PARTITION_KEY",
                :OLD."PARTY_ID",
                :OLD."PARTY_MESSAGE_STREAM_ID",
                :OLD."PROCESSED",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RECORD_TYPE",
                :OLD."RETRY_COUNT",
                :OLD."SEQUENCE_NUMBER",
                :OLD."TOTAL_MESSAGES",
                :OLD."TOTAL_SUBMITTED_MSGS",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BAR_CODE",
                "BATCH_NUMBER",
                "DUPLICATE_HASH",
                "DUPLICATE_PARENT_ID",
                "EXTERNAL_ID",
                "GROUP_NAME",
                "IS_DUPLICATE",
                "LAST_MODIFIED_ON",
                "LAST_MODIFIED_ON_OFST",
                "LAST_MODIFIED_ON_ZONE",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "MSG_PAYLOAD_ID",
                "PARENT_BAR_CODE",
                "PARTITION_KEY",
                "PARTY_ID",
                "PARTY_MESSAGE_STREAM_ID",
                "PROCESSED",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RECORD_TYPE",
                "RETRY_COUNT",
                "SEQUENCE_NUMBER",
                "TOTAL_MESSAGES",
                "TOTAL_SUBMITTED_MSGS",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BAR_CODE",
                :OLD."BATCH_NUMBER",
                :OLD."DUPLICATE_HASH",
                :OLD."DUPLICATE_PARENT_ID",
                :OLD."EXTERNAL_ID",
                :OLD."GROUP_NAME",
                :OLD."IS_DUPLICATE",
                :OLD."LAST_MODIFIED_ON",
                :OLD."LAST_MODIFIED_ON_OFST",
                :OLD."LAST_MODIFIED_ON_ZONE",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."MSG_PAYLOAD_ID",
                :OLD."PARENT_BAR_CODE",
                :OLD."PARTITION_KEY",
                :OLD."PARTY_ID",
                :OLD."PARTY_MESSAGE_STREAM_ID",
                :OLD."PROCESSED",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RECORD_TYPE",
                :OLD."RETRY_COUNT",
                :OLD."SEQUENCE_NUMBER",
                :OLD."TOTAL_MESSAGES",
                :OLD."TOTAL_SUBMITTED_MSGS",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BAR_CODE",
                "BATCH_NUMBER",
                "DUPLICATE_HASH",
                "DUPLICATE_PARENT_ID",
                "EXTERNAL_ID",
                "GROUP_NAME",
                "IS_DUPLICATE",
                "LAST_MODIFIED_ON",
                "LAST_MODIFIED_ON_OFST",
                "LAST_MODIFIED_ON_ZONE",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "MSG_PAYLOAD_ID",
                "PARENT_BAR_CODE",
                "PARTITION_KEY",
                "PARTY_ID",
                "PARTY_MESSAGE_STREAM_ID",
                "PROCESSED",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RECORD_TYPE",
                "RETRY_COUNT",
                "SEQUENCE_NUMBER",
                "TOTAL_MESSAGES",
                "TOTAL_SUBMITTED_MSGS",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."BAR_CODE",
                :NEW."BATCH_NUMBER",
                :NEW."DUPLICATE_HASH",
                :NEW."DUPLICATE_PARENT_ID",
                :NEW."EXTERNAL_ID",
                :NEW."GROUP_NAME",
                :NEW."IS_DUPLICATE",
                :NEW."LAST_MODIFIED_ON",
                :NEW."LAST_MODIFIED_ON_OFST",
                :NEW."LAST_MODIFIED_ON_ZONE",
                :NEW."MESSAGE_SCHEMA_ID",
                :NEW."MESSAGE_STATUS_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."MSG_PAYLOAD_ID",
                :NEW."PARENT_BAR_CODE",
                :NEW."PARTITION_KEY",
                :NEW."PARTY_ID",
                :NEW."PARTY_MESSAGE_STREAM_ID",
                :NEW."PROCESSED",
                :NEW."RECEIVED_ON",
                :NEW."RECEIVED_ON_OFST",
                :NEW."RECEIVED_ON_ZONE",
                :NEW."RECORD_TYPE",
                :NEW."RETRY_COUNT",
                :NEW."SEQUENCE_NUMBER",
                :NEW."TOTAL_MESSAGES",
                :NEW."TOTAL_SUBMITTED_MSGS",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "BAR_CODE",
                "BATCH_NUMBER",
                "DUPLICATE_HASH",
                "DUPLICATE_PARENT_ID",
                "EXTERNAL_ID",
                "GROUP_NAME",
                "IS_DUPLICATE",
                "LAST_MODIFIED_ON",
                "LAST_MODIFIED_ON_OFST",
                "LAST_MODIFIED_ON_ZONE",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_STATUS_ID",
                "MESSAGE_TYPE_ID",
                "MSG_PAYLOAD_ID",
                "PARENT_BAR_CODE",
                "PARTITION_KEY",
                "PARTY_ID",
                "PARTY_MESSAGE_STREAM_ID",
                "PROCESSED",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RECORD_TYPE",
                "RETRY_COUNT",
                "SEQUENCE_NUMBER",
                "TOTAL_MESSAGES",
                "TOTAL_SUBMITTED_MSGS",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."BAR_CODE",
                :OLD."BATCH_NUMBER",
                :OLD."DUPLICATE_HASH",
                :OLD."DUPLICATE_PARENT_ID",
                :OLD."EXTERNAL_ID",
                :OLD."GROUP_NAME",
                :OLD."IS_DUPLICATE",
                :OLD."LAST_MODIFIED_ON",
                :OLD."LAST_MODIFIED_ON_OFST",
                :OLD."LAST_MODIFIED_ON_ZONE",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."MSG_PAYLOAD_ID",
                :OLD."PARENT_BAR_CODE",
                :OLD."PARTITION_KEY",
                :OLD."PARTY_ID",
                :OLD."PARTY_MESSAGE_STREAM_ID",
                :OLD."PROCESSED",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RECORD_TYPE",
                :OLD."RETRY_COUNT",
                :OLD."SEQUENCE_NUMBER",
                :OLD."TOTAL_MESSAGES",
                :OLD."TOTAL_SUBMITTED_MSGS",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_FORMAT_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "FORMAT_TYPE_ID", "MESSAGE_SCHEMA_ID", "MESSAGE_TYPE_ID", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_FORMAT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_FORMAT_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_FORMAT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "FORMAT_TYPE_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_FORMAT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "FORMAT_TYPE_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_FORMAT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "FORMAT_TYPE_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."FORMAT_TYPE_ID",
                :NEW."MESSAGE_SCHEMA_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_FORMAT_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "FORMAT_TYPE_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_PARAM_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "MESSAGE_ID", "MESSAGE_TYPE_PARAM_ID", "PARAM_VALUE", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_PARAM" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_PARAM_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "MESSAGE_TYPE_PARAM_ID",
                "PARAM_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."MESSAGE_TYPE_PARAM_ID",
                :OLD."PARAM_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "MESSAGE_TYPE_PARAM_ID",
                "PARAM_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."MESSAGE_TYPE_PARAM_ID",
                :OLD."PARAM_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "MESSAGE_TYPE_PARAM_ID",
                "PARAM_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."MESSAGE_ID",
                :NEW."MESSAGE_TYPE_PARAM_ID",
                :NEW."PARAM_VALUE",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "MESSAGE_TYPE_PARAM_ID",
                "PARAM_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."MESSAGE_TYPE_PARAM_ID",
                :OLD."PARAM_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_RESPONSE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "MESSAGE_ID", "PARTY_ID", "RECEIVED_ON", "RECEIVED_ON_OFST", "RECEIVED_ON_ZONE", "RESPONSE_CODE", "RESPONSE_MESSAGE", "RESPONSE_REF", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_RESPONSE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_RESPONSE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RESPONSE_CODE",
                "RESPONSE_MESSAGE",
                "RESPONSE_REF",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RESPONSE_CODE",
                :OLD."RESPONSE_MESSAGE",
                :OLD."RESPONSE_REF",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RESPONSE_CODE",
                "RESPONSE_MESSAGE",
                "RESPONSE_REF",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RESPONSE_CODE",
                :OLD."RESPONSE_MESSAGE",
                :OLD."RESPONSE_REF",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RESPONSE_CODE",
                "RESPONSE_MESSAGE",
                "RESPONSE_REF",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."MESSAGE_ID",
                :NEW."PARTY_ID",
                :NEW."RECEIVED_ON",
                :NEW."RECEIVED_ON_OFST",
                :NEW."RECEIVED_ON_ZONE",
                :NEW."RESPONSE_CODE",
                :NEW."RESPONSE_MESSAGE",
                :NEW."RESPONSE_REF",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_RESPONSE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "MESSAGE_ID",
                "PARTY_ID",
                "RECEIVED_ON",
                "RECEIVED_ON_OFST",
                "RECEIVED_ON_ZONE",
                "RESPONSE_CODE",
                "RESPONSE_MESSAGE",
                "RESPONSE_REF",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."MESSAGE_ID",
                :OLD."PARTY_ID",
                :OLD."RECEIVED_ON",
                :OLD."RECEIVED_ON_OFST",
                :OLD."RECEIVED_ON_ZONE",
                :OLD."RESPONSE_CODE",
                :OLD."RESPONSE_MESSAGE",
                :OLD."RESPONSE_REF",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_SCHEMA_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ID_PATH", "MESSAGE_TYPE_ID", "PARTITION_KEY_PATH", "SCHEMA_CONTENT", "SCHEMA_FORMAT", "VERSION", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_SCHEMA" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_SCHEMA_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ID_PATH",
                "MESSAGE_TYPE_ID",
                "PARTITION_KEY_PATH",
                "SCHEMA_CONTENT",
                "SCHEMA_FORMAT",
                "VERSION",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ID_PATH",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTITION_KEY_PATH",
                :OLD."SCHEMA_CONTENT",
                :OLD."SCHEMA_FORMAT",
                :OLD."VERSION",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ID_PATH",
                "MESSAGE_TYPE_ID",
                "PARTITION_KEY_PATH",
                "SCHEMA_CONTENT",
                "SCHEMA_FORMAT",
                "VERSION",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ID_PATH",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTITION_KEY_PATH",
                :OLD."SCHEMA_CONTENT",
                :OLD."SCHEMA_FORMAT",
                :OLD."VERSION",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ID_PATH",
                "MESSAGE_TYPE_ID",
                "PARTITION_KEY_PATH",
                "SCHEMA_CONTENT",
                "SCHEMA_FORMAT",
                "VERSION",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ID_PATH",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."PARTITION_KEY_PATH",
                :NEW."SCHEMA_CONTENT",
                :NEW."SCHEMA_FORMAT",
                :NEW."VERSION",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_SCHEMA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ID_PATH",
                "MESSAGE_TYPE_ID",
                "PARTITION_KEY_PATH",
                "SCHEMA_CONTENT",
                "SCHEMA_FORMAT",
                "VERSION",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ID_PATH",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTITION_KEY_PATH",
                :OLD."SCHEMA_CONTENT",
                :OLD."SCHEMA_FORMAT",
                :OLD."VERSION",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_STATUS_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_STATUS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_STATUS_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "MESSAGE_STATUS_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_STATUS_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_STATUS_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_STATUS_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_STATUS_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."MESSAGE_STATUS_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_STATUS_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_STATUS_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_STATUS_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "EXTRACT_EXPRESSION", "MESSAGE_TYPE_ID", "NAME", "SOURCE", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_TYPE_PARAM" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EXTRACT_EXPRESSION",
                "MESSAGE_TYPE_ID",
                "NAME",
                "SOURCE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EXTRACT_EXPRESSION",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."SOURCE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EXTRACT_EXPRESSION",
                "MESSAGE_TYPE_ID",
                "NAME",
                "SOURCE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EXTRACT_EXPRESSION",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."SOURCE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EXTRACT_EXPRESSION",
                "MESSAGE_TYPE_ID",
                "NAME",
                "SOURCE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."EXTRACT_EXPRESSION",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."NAME",
                :NEW."SOURCE",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EXTRACT_EXPRESSION",
                "MESSAGE_TYPE_ID",
                "NAME",
                "SOURCE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EXTRACT_EXPRESSION",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."SOURCE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "MESSAGE_TYPE_ID", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MESSAGE_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MESSAGE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "MESSAGE_TYPE_ID",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."MSG_PAYLOAD_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "PAYLOAD", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."MSG_PAYLOAD" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."MSG_PAYLOAD_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."MSG_PAYLOAD_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PAYLOAD",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PAYLOAD",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."MSG_PAYLOAD_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PAYLOAD",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PAYLOAD",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."MSG_PAYLOAD_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PAYLOAD",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."PAYLOAD",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."MSG_PAYLOAD_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PAYLOAD",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PAYLOAD",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAMETER_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "DEFAULT_VALUE", "IS_DYNAMIC", "IS_NULLABLE", "KEY", "NAME", "NOTE", "PARAMETER_TYPE_ID", "STATIC_VALUE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAMETER" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAMETER_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DEFAULT_VALUE",
                "IS_DYNAMIC",
                "IS_NULLABLE",
                "KEY",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "STATIC_VALUE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DEFAULT_VALUE",
                :OLD."IS_DYNAMIC",
                :OLD."IS_NULLABLE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."STATIC_VALUE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DEFAULT_VALUE",
                "IS_DYNAMIC",
                "IS_NULLABLE",
                "KEY",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "STATIC_VALUE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DEFAULT_VALUE",
                :OLD."IS_DYNAMIC",
                :OLD."IS_NULLABLE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."STATIC_VALUE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DEFAULT_VALUE",
                "IS_DYNAMIC",
                "IS_NULLABLE",
                "KEY",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "STATIC_VALUE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."DEFAULT_VALUE",
                :NEW."IS_DYNAMIC",
                :NEW."IS_NULLABLE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."PARAMETER_TYPE_ID",
                :NEW."STATIC_VALUE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAMETER_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "DEFAULT_VALUE",
                "IS_DYNAMIC",
                "IS_NULLABLE",
                "KEY",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "STATIC_VALUE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."DEFAULT_VALUE",
                :OLD."IS_DYNAMIC",
                :OLD."IS_NULLABLE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."STATIC_VALUE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAMETER_MAP_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ORDER", "PARAMETER_ID", "RULE_ACTION_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAMETER_MAP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAMETER_MAP_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAMETER_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ORDER",
                "PARAMETER_ID",
                "RULE_ACTION_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ORDER",
                :OLD."PARAMETER_ID",
                :OLD."RULE_ACTION_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAMETER_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ORDER",
                "PARAMETER_ID",
                "RULE_ACTION_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ORDER",
                :OLD."PARAMETER_ID",
                :OLD."RULE_ACTION_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAMETER_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ORDER",
                "PARAMETER_ID",
                "RULE_ACTION_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ORDER",
                :NEW."PARAMETER_ID",
                :NEW."RULE_ACTION_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAMETER_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ORDER",
                "PARAMETER_ID",
                "RULE_ACTION_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ORDER",
                :OLD."PARAMETER_ID",
                :OLD."RULE_ACTION_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAMETER_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "PARAMETER_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAMETER_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAMETER_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAMETER_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAMETER_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."PARAMETER_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAMETER_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAMETER_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAMETER_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "PARAMETER_TYPE_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAMETER_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."PARAMETER_TYPE_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAMETER_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARAMETER_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARAMETER_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARAM_VALUE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "DATA_REPOSITORY_ID", "FORMAT_TYPE_PARAM_ID", "MESSAGE_FORMAT_ID", "PARAM_VALUE", "REPOSITORY_TYPE", "REPOSITORY_TYPE_PARM_ID", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARAM_VALUE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARAM_VALUE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARAM_VALUE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_ID",
                "FORMAT_TYPE_PARAM_ID",
                "MESSAGE_FORMAT_ID",
                "PARAM_VALUE",
                "REPOSITORY_TYPE",
                "REPOSITORY_TYPE_PARM_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_ID",
                :OLD."FORMAT_TYPE_PARAM_ID",
                :OLD."MESSAGE_FORMAT_ID",
                :OLD."PARAM_VALUE",
                :OLD."REPOSITORY_TYPE",
                :OLD."REPOSITORY_TYPE_PARM_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARAM_VALUE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_ID",
                "FORMAT_TYPE_PARAM_ID",
                "MESSAGE_FORMAT_ID",
                "PARAM_VALUE",
                "REPOSITORY_TYPE",
                "REPOSITORY_TYPE_PARM_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_ID",
                :OLD."FORMAT_TYPE_PARAM_ID",
                :OLD."MESSAGE_FORMAT_ID",
                :OLD."PARAM_VALUE",
                :OLD."REPOSITORY_TYPE",
                :OLD."REPOSITORY_TYPE_PARM_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARAM_VALUE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_ID",
                "FORMAT_TYPE_PARAM_ID",
                "MESSAGE_FORMAT_ID",
                "PARAM_VALUE",
                "REPOSITORY_TYPE",
                "REPOSITORY_TYPE_PARM_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."DATA_REPOSITORY_ID",
                :NEW."FORMAT_TYPE_PARAM_ID",
                :NEW."MESSAGE_FORMAT_ID",
                :NEW."PARAM_VALUE",
                :NEW."REPOSITORY_TYPE",
                :NEW."REPOSITORY_TYPE_PARM_ID",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARAM_VALUE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_ID",
                "FORMAT_TYPE_PARAM_ID",
                "MESSAGE_FORMAT_ID",
                "PARAM_VALUE",
                "REPOSITORY_TYPE",
                "REPOSITORY_TYPE_PARM_ID",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_ID",
                :OLD."FORMAT_TYPE_PARAM_ID",
                :OLD."MESSAGE_FORMAT_ID",
                :OLD."PARAM_VALUE",
                :OLD."REPOSITORY_TYPE",
                :OLD."REPOSITORY_TYPE_PARM_ID",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "NAME", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."NAME",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "PARTY_ATTRIBUTE_TYPE_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."PARTY_ATTRIBUTE_TYPE_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBT_TYP_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ATTRIBUTE_VALUE", "PARTY_ATTRIBUTE_TYPE_ID", "PARTY_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ATTRIBUTE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ATTRIBUTE_VALUE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "PARTY_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ATTRIBUTE_VALUE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ATTRIBUTE_VALUE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "PARTY_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ATTRIBUTE_VALUE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ATTRIBUTE_VALUE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "PARTY_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ATTRIBUTE_VALUE",
                :NEW."PARTY_ATTRIBUTE_TYPE_ID",
                :NEW."PARTY_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ATTRIBUTE_VALUE",
                "PARTY_ATTRIBUTE_TYPE_ID",
                "PARTY_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ATTRIBUTE_VALUE",
                :OLD."PARTY_ATTRIBUTE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ATTRIBUTE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CRON_SCHEDULE", "INBOUND_MESSAGE_FRMT_ID", "JOB_ID", "MESSAGE_SCHEMA_ID", "MESSAGE_TYPE_ID", "OUTBOUND_MESSAG_FRMT_ID", "PARTY_ID", "SINK_ID", "SOURCE_HOST", "SOURCE_ID", "STREAM_IDENTIFIER", "STREAM_TYPE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_MESSAGE_STREAM" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CRON_SCHEDULE",
                "INBOUND_MESSAGE_FRMT_ID",
                "JOB_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "OUTBOUND_MESSAG_FRMT_ID",
                "PARTY_ID",
                "SINK_ID",
                "SOURCE_HOST",
                "SOURCE_ID",
                "STREAM_IDENTIFIER",
                "STREAM_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CRON_SCHEDULE",
                :OLD."INBOUND_MESSAGE_FRMT_ID",
                :OLD."JOB_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."OUTBOUND_MESSAG_FRMT_ID",
                :OLD."PARTY_ID",
                :OLD."SINK_ID",
                :OLD."SOURCE_HOST",
                :OLD."SOURCE_ID",
                :OLD."STREAM_IDENTIFIER",
                :OLD."STREAM_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CRON_SCHEDULE",
                "INBOUND_MESSAGE_FRMT_ID",
                "JOB_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "OUTBOUND_MESSAG_FRMT_ID",
                "PARTY_ID",
                "SINK_ID",
                "SOURCE_HOST",
                "SOURCE_ID",
                "STREAM_IDENTIFIER",
                "STREAM_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CRON_SCHEDULE",
                :OLD."INBOUND_MESSAGE_FRMT_ID",
                :OLD."JOB_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."OUTBOUND_MESSAG_FRMT_ID",
                :OLD."PARTY_ID",
                :OLD."SINK_ID",
                :OLD."SOURCE_HOST",
                :OLD."SOURCE_ID",
                :OLD."STREAM_IDENTIFIER",
                :OLD."STREAM_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CRON_SCHEDULE",
                "INBOUND_MESSAGE_FRMT_ID",
                "JOB_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "OUTBOUND_MESSAG_FRMT_ID",
                "PARTY_ID",
                "SINK_ID",
                "SOURCE_HOST",
                "SOURCE_ID",
                "STREAM_IDENTIFIER",
                "STREAM_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CRON_SCHEDULE",
                :NEW."INBOUND_MESSAGE_FRMT_ID",
                :NEW."JOB_ID",
                :NEW."MESSAGE_SCHEMA_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."OUTBOUND_MESSAG_FRMT_ID",
                :NEW."PARTY_ID",
                :NEW."SINK_ID",
                :NEW."SOURCE_HOST",
                :NEW."SOURCE_ID",
                :NEW."STREAM_IDENTIFIER",
                :NEW."STREAM_TYPE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_MESSAGE_STREAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CRON_SCHEDULE",
                "INBOUND_MESSAGE_FRMT_ID",
                "JOB_ID",
                "MESSAGE_SCHEMA_ID",
                "MESSAGE_TYPE_ID",
                "OUTBOUND_MESSAG_FRMT_ID",
                "PARTY_ID",
                "SINK_ID",
                "SOURCE_HOST",
                "SOURCE_ID",
                "STREAM_IDENTIFIER",
                "STREAM_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CRON_SCHEDULE",
                :OLD."INBOUND_MESSAGE_FRMT_ID",
                :OLD."JOB_ID",
                :OLD."MESSAGE_SCHEMA_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."OUTBOUND_MESSAG_FRMT_ID",
                :OLD."PARTY_ID",
                :OLD."SINK_ID",
                :OLD."SOURCE_HOST",
                :OLD."SOURCE_ID",
                :OLD."STREAM_IDENTIFIER",
                :OLD."STREAM_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ROLE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "PARTY_ID", "PARTY_ROLE_TYPE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ROLE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ROLE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_ROLE_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ROLE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_ROLE_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ROLE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_ROLE_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."PARTY_ID",
                :NEW."PARTY_ROLE_TYPE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_ROLE_TYPE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ROLE_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "PARTY_ROLE_TYPE_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_ROLE_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ROLE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ROLE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ROLE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."PARTY_ROLE_TYPE_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_ROLE_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "PARTY_ROLE_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."PARTY_ROLE_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_RULE_MAP_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "PARTY_ID", "PARTY_RULE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_RULE_MAP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_RULE_MAP_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_RULE_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_RULE_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_RULE_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."PARTY_ID",
                :NEW."PARTY_RULE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_RULE_MAP_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "PARTY_ID",
                "PARTY_RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."PARTY_ID",
                :OLD."PARTY_RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."PARTY_SLA_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."PARTY_SLA" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."PARTY_SLA_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."PARTY_SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."PARTY_SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."PARTY_SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."PARTY_SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."RULE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "EVENT_TYPE_ID", "MESSAGE_TYPE_ID", "ORDER", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."RULE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."RULE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."RULE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MESSAGE_TYPE_ID",
                "ORDER",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."ORDER",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."RULE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MESSAGE_TYPE_ID",
                "ORDER",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."ORDER",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."RULE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MESSAGE_TYPE_ID",
                "ORDER",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."EVENT_TYPE_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."ORDER",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."RULE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MESSAGE_TYPE_ID",
                "ORDER",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."ORDER",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."RULE_ACTION_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "ACTION_TYPE_ID", "EFFECTIVE_FROM", "EFFECTIVE_TO", "ORDER", "RULE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."RULE_ACTION" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."RULE_ACTION_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."RULE_ACTION_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "EFFECTIVE_FROM",
                "EFFECTIVE_TO",
                "ORDER",
                "RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."EFFECTIVE_FROM",
                :OLD."EFFECTIVE_TO",
                :OLD."ORDER",
                :OLD."RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."RULE_ACTION_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "EFFECTIVE_FROM",
                "EFFECTIVE_TO",
                "ORDER",
                "RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."EFFECTIVE_FROM",
                :OLD."EFFECTIVE_TO",
                :OLD."ORDER",
                :OLD."RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."RULE_ACTION_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "EFFECTIVE_FROM",
                "EFFECTIVE_TO",
                "ORDER",
                "RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."ACTION_TYPE_ID",
                :NEW."EFFECTIVE_FROM",
                :NEW."EFFECTIVE_TO",
                :NEW."ORDER",
                :NEW."RULE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."RULE_ACTION_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "ACTION_TYPE_ID",
                "EFFECTIVE_FROM",
                "EFFECTIVE_TO",
                "ORDER",
                "RULE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."ACTION_TYPE_ID",
                :OLD."EFFECTIVE_FROM",
                :OLD."EFFECTIVE_TO",
                :OLD."ORDER",
                :OLD."RULE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SLA_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "EVENT_TYPE_ID", "MEASUREMENT_UNIT_ID", "MESSAGE_TYPE_ID", "PARTY_ID", "SLA_LEVEL_ID", "SLA_TYPE_ID", "SLA_VALUE", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SLA" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SLA_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MEASUREMENT_UNIT_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "SLA_LEVEL_ID",
                "SLA_TYPE_ID",
                "SLA_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."SLA_LEVEL_ID",
                :OLD."SLA_TYPE_ID",
                :OLD."SLA_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MEASUREMENT_UNIT_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "SLA_LEVEL_ID",
                "SLA_TYPE_ID",
                "SLA_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."SLA_LEVEL_ID",
                :OLD."SLA_TYPE_ID",
                :OLD."SLA_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MEASUREMENT_UNIT_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "SLA_LEVEL_ID",
                "SLA_TYPE_ID",
                "SLA_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."EVENT_TYPE_ID",
                :NEW."MEASUREMENT_UNIT_ID",
                :NEW."MESSAGE_TYPE_ID",
                :NEW."PARTY_ID",
                :NEW."SLA_LEVEL_ID",
                :NEW."SLA_TYPE_ID",
                :NEW."SLA_VALUE",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SLA_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "EVENT_TYPE_ID",
                "MEASUREMENT_UNIT_ID",
                "MESSAGE_TYPE_ID",
                "PARTY_ID",
                "SLA_LEVEL_ID",
                "SLA_TYPE_ID",
                "SLA_VALUE",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."EVENT_TYPE_ID",
                :OLD."MEASUREMENT_UNIT_ID",
                :OLD."MESSAGE_TYPE_ID",
                :OLD."PARTY_ID",
                :OLD."SLA_LEVEL_ID",
                :OLD."SLA_TYPE_ID",
                :OLD."SLA_VALUE",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SLA_LEVEL_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SLA_LEVEL" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SLA_LEVEL_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SLA_LEVEL_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SLA_LEVEL_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SLA_LEVEL_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SLA_LEVEL_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SLA_LEVEL_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "SLA_LEVEL_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SLA_LEVEL_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SLA_LEVEL_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SLA_LEVEL_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_LEVEL_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_LEVEL_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SLA_LEVEL_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_LEVEL_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_LEVEL_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SLA_LEVEL_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_LEVEL_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SLA_LEVEL_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SLA_LEVEL_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_LEVEL_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_LEVEL_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SLA_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SLA_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SLA_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SLA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SLA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SLA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SLA_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SLA_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "SLA_TYPE_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SLA_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SLA_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SLA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SLA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SLA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SLA_TYPE_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SLA_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "SLA_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SLA_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."STREAM_TYPE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "KEY", "NAME", "NOTE", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."STREAM_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."STREAM_TYPE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."STREAM_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."STREAM_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."STREAM_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."KEY",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."STREAM_TYPE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "KEY",
                "NAME",
                "NOTE",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."KEY",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."STREAM_TYPE_TR_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "CODE", "NAME", "NOTE", "STREAM_TYPE_ID", "SYSTEM_LANGUAGE_ID", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."STREAM_TYPE_TR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."STREAM_TYPE_TR_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."STREAM_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "STREAM_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."STREAM_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."STREAM_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "STREAM_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."STREAM_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."STREAM_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "STREAM_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."CODE",
                :NEW."NAME",
                :NEW."NOTE",
                :NEW."STREAM_TYPE_ID",
                :NEW."SYSTEM_LANGUAGE_ID",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."STREAM_TYPE_TR_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "CODE",
                "NAME",
                "NOTE",
                "STREAM_TYPE_ID",
                "SYSTEM_LANGUAGE_ID",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."CODE",
                :OLD."NAME",
                :OLD."NOTE",
                :OLD."STREAM_TYPE_ID",
                :OLD."SYSTEM_LANGUAGE_ID",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "LANGUAGE_TAG", "NAME", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."SYSTEM_LANGUAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "LANGUAGE_TAG",
                "NAME",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."LANGUAGE_TAG",
                :OLD."NAME",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "LANGUAGE_TAG",
                "NAME",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."LANGUAGE_TAG",
                :OLD."NAME",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "LANGUAGE_TAG",
                "NAME",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."LANGUAGE_TAG",
                :NEW."NAME",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."SYSTEM_LANGUAGE_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "LANGUAGE_TAG",
                "NAME",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."LANGUAGE_TAG",
                :OLD."NAME",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER "VIT_VDX"."TYPE_PARAM_AUDIT_TRG"
BEFORE INSERT OR DELETE OR UPDATE OF "ID", "UUID", "TENANT", "DATA_REPOSITORY_TYPE_ID", "DEFAULT_VALUE", "DESCRIPTION", "FIELD_DATA_TYPE_ID", "FORMAT_TYPE_ID", "MANDATORY", "PARAM_NAME", "DISCRIMINATOR", "DATE_TIME_LAST_MODIFIED", "OS_USER_LAST_MODIFIED", "SESS_USER_LAST_MODIFIED" ON "VIT_VDX"."TYPE_PARAM" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
DECLARE 
chg_os_user varchar2(60)           := SYS_CONTEXT ('USERENV', 'OS_USER');
chg_sess_user varchar2(60)         := SYS_CONTEXT ('USERENV', 'SESSION_USER');
chg_sysdate date                   := SYSDATE;
v_sequence_no "VIT_VDX"."TYPE_PARAM_AUDIT".SEQ_NO%TYPE;
BEGIN
    IF INSERTING Then
        :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
        :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
        :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
    ELSE
        SELECT "VIT_VDX"."VDX_DATA_SWITCH_GEN_SEQ".NEXTVAL INTO v_sequence_no FROM DUAL;
        IF UPDATING Then
            :new."OS_USER_LAST_MODIFIED"   := chg_os_user;
            :new."SESS_USER_LAST_MODIFIED" := chg_sess_user;
            :new."DATE_TIME_LAST_MODIFIED" := chg_sysdate;
            IF
                :OLD.ID = :NEW.ID
            THEN
            INSERT INTO "VIT_VDX"."TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DEFAULT_VALUE",
                "DESCRIPTION",
                "FIELD_DATA_TYPE_ID",
                "FORMAT_TYPE_ID",
                "MANDATORY",
                "PARAM_NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DEFAULT_VALUE",
                :OLD."DESCRIPTION",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MANDATORY",
                :OLD."PARAM_NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'U', 
                chg_sysdate
                );
            ELSE
            INSERT INTO "VIT_VDX"."TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DEFAULT_VALUE",
                "DESCRIPTION",
                "FIELD_DATA_TYPE_ID",
                "FORMAT_TYPE_ID",
                "MANDATORY",
                "PARAM_NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DEFAULT_VALUE",
                :OLD."DESCRIPTION",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MANDATORY",
                :OLD."PARAM_NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'B', 
                chg_sysdate);
            INSERT INTO "VIT_VDX"."TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DEFAULT_VALUE",
                "DESCRIPTION",
                "FIELD_DATA_TYPE_ID",
                "FORMAT_TYPE_ID",
                "MANDATORY",
                "PARAM_NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE"
                )
                VALUES (
                :NEW."ID",
                :NEW."UUID",
                :NEW."TENANT",
                :NEW."DATA_REPOSITORY_TYPE_ID",
                :NEW."DEFAULT_VALUE",
                :NEW."DESCRIPTION",
                :NEW."FIELD_DATA_TYPE_ID",
                :NEW."FORMAT_TYPE_ID",
                :NEW."MANDATORY",
                :NEW."PARAM_NAME",
                :NEW."DISCRIMINATOR",
                :NEW."DATE_TIME_LAST_MODIFIED",
                :NEW."OS_USER_LAST_MODIFIED",
                :NEW."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'A', 
                chg_sysdate);
            END IF;
        ELSIF DELETING THEN
            INSERT INTO "VIT_VDX"."TYPE_PARAM_AUDIT"
                (
                "ID",
                "UUID",
                "TENANT",
                "DATA_REPOSITORY_TYPE_ID",
                "DEFAULT_VALUE",
                "DESCRIPTION",
                "FIELD_DATA_TYPE_ID",
                "FORMAT_TYPE_ID",
                "MANDATORY",
                "PARAM_NAME",
                "DISCRIMINATOR",
                "DATE_TIME_LAST_MODIFIED",
                "OS_USER_LAST_MODIFIED",
                "SESS_USER_LAST_MODIFIED",
                "SEQ_NO",
                "ACTION",
                "AUDIT_DATE",
                "DELETE_OS_USER",
                "DELETE_SESS_USER"
                )
                VALUES (
                :OLD."ID",
                :OLD."UUID",
                :OLD."TENANT",
                :OLD."DATA_REPOSITORY_TYPE_ID",
                :OLD."DEFAULT_VALUE",
                :OLD."DESCRIPTION",
                :OLD."FIELD_DATA_TYPE_ID",
                :OLD."FORMAT_TYPE_ID",
                :OLD."MANDATORY",
                :OLD."PARAM_NAME",
                :OLD."DISCRIMINATOR",
                :OLD."DATE_TIME_LAST_MODIFIED",
                :OLD."OS_USER_LAST_MODIFIED",
                :OLD."SESS_USER_LAST_MODIFIED",
                v_sequence_no, 
                'D', 
                chg_sysdate, 
                chg_os_user, 
                chg_sess_user
                );
        END IF;
    END IF;
END;
/
GRANT SELECT on "VIT_VDX"."ID_SEQUENCE" to VIT_VDX/
GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."ACTION_PARAMETER" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."ACTION_PARAMETER" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."ACTION_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."ACTION_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."ACTION_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."ACTION_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."DATA_REPOSITORY" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."DATA_REPOSITORY" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."DATA_REPOSITORY_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."DATA_REPOSITORY_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."DATA_REPOSTRY_TYP_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."ERROR_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."ERROR_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."ERROR_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."ERROR_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."EVENT_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."EVENT_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."EVENT_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."EVENT_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."EXPECTED_MESSAGE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."EXPECTED_MESSAGE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."FIELD_DATA_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."FIELD_DATA_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."FIELD_DATA_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."FIELD_DATA_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."FORMAT_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."FORMAT_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."FORMAT_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."FORMAT_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MEASUREMENT_UNIT" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MEASUREMENT_UNIT" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MEASUREMENT_UNIT_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MEASUREMENT_UNIT_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_FORMAT" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_FORMAT" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_PARAM" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_PARAM" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_RESPONSE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_RESPONSE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_SCHEMA" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_SCHEMA" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_STATUS" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_STATUS" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_STATUS_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_STATUS_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_TYPE_PARAM" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_TYPE_PARAM" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MESSAGE_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MESSAGE_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."MSG_PAYLOAD" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."MSG_PAYLOAD" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAMETER" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAMETER" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAMETER_MAP" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAMETER_MAP" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAMETER_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAMETER_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAMETER_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAMETER_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAMETER_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAMETER_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARAM_VALUE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARAM_VALUE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ATTRIBT_TYP_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ATTRIBUTE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ATTRIBUTE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ATTRIBUTE_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_MESSAGE_STREAM" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_MESSAGE_STREAM" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ROLE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ROLE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ROLE_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ROLE_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_ROLE_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_ROLE_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_RULE_MAP" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_RULE_MAP" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."PARTY_SLA" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."PARTY_SLA" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."RULE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."RULE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."RULE_ACTION" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."RULE_ACTION" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SLA" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SLA" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SLA_LEVEL" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SLA_LEVEL" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SLA_LEVEL_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SLA_LEVEL_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SLA_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SLA_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SLA_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SLA_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."STREAM_TYPE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."STREAM_TYPE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."STREAM_TYPE_TR" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."STREAM_TYPE_TR" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."SYSTEM_LANGUAGE" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."SYSTEM_LANGUAGE" TO VDX_DATA_SWITCH_QUERY_ROLE/

GRANT SELECT, UPDATE, DELETE, INSERT ON "VIT_VDX"."TYPE_PARAM" TO VIT_VDX/
GRANT SELECT ON "VIT_VDX"."TYPE_PARAM" TO VDX_DATA_SWITCH_QUERY_ROLE/


-- mss_gen
